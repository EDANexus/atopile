# Generated from PythonParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,101,2226,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,1,0,3,0,406,
        8,0,1,0,1,0,1,1,1,1,1,2,1,2,5,2,414,8,2,10,2,12,2,417,9,2,1,2,1,
        2,1,3,1,3,3,3,423,8,3,1,3,1,3,1,3,1,3,5,3,429,8,3,10,3,12,3,432,
        9,3,1,3,1,3,1,4,1,4,1,5,4,5,439,8,5,11,5,12,5,440,1,6,1,6,3,6,445,
        8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,453,8,7,1,8,1,8,1,8,5,8,458,8,8,
        10,8,12,8,461,9,8,1,8,3,8,464,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,483,8,9,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,3,10,493,8,10,1,11,1,11,1,11,1,11,1,11,
        3,11,500,8,11,1,11,1,11,1,11,1,11,1,11,3,11,507,8,11,1,11,1,11,1,
        11,1,11,3,11,513,8,11,1,11,1,11,1,11,4,11,518,8,11,11,11,12,11,519,
        1,11,1,11,3,11,524,8,11,1,11,3,11,527,8,11,1,11,1,11,1,11,1,11,3,
        11,533,8,11,3,11,535,8,11,1,12,1,12,3,12,539,8,12,1,13,1,13,1,14,
        1,14,3,14,545,8,14,1,15,1,15,1,15,1,15,3,15,551,8,15,3,15,553,8,
        15,1,16,1,16,1,16,1,16,5,16,559,8,16,10,16,12,16,562,9,16,1,17,1,
        17,1,17,1,17,5,17,568,8,17,10,17,12,17,571,9,17,1,18,1,18,1,18,1,
        19,1,19,1,20,1,20,1,20,1,20,3,20,582,8,20,1,21,1,21,3,21,586,8,21,
        1,22,1,22,1,22,4,22,591,8,22,11,22,12,22,592,1,23,1,23,1,23,1,24,
        1,24,5,24,600,8,24,10,24,12,24,603,9,24,1,24,1,24,1,24,1,24,1,24,
        1,24,4,24,611,8,24,11,24,12,24,612,1,24,1,24,3,24,617,8,24,1,25,
        1,25,1,25,3,25,622,8,25,1,25,1,25,1,25,1,25,3,25,628,8,25,1,26,1,
        26,1,26,5,26,633,8,26,10,26,12,26,636,9,26,1,27,1,27,1,27,3,27,641,
        8,27,1,28,1,28,1,28,5,28,646,8,28,10,28,12,28,649,9,28,1,29,1,29,
        1,29,3,29,654,8,29,1,30,1,30,1,30,1,30,1,30,1,30,5,30,662,8,30,10,
        30,12,30,665,9,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,673,8,31,1,
        32,1,32,1,32,1,32,4,32,679,8,32,11,32,12,32,680,1,33,1,33,1,33,1,
        33,3,33,687,8,33,1,34,1,34,1,34,3,34,692,8,34,1,34,1,34,3,34,696,
        8,34,1,34,3,34,699,8,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,3,35,
        708,8,35,1,36,1,36,1,36,3,36,713,8,36,1,36,1,36,3,36,717,8,36,1,
        36,1,36,1,36,3,36,722,8,36,1,36,1,36,3,36,726,8,36,1,36,1,36,1,36,
        1,36,1,36,3,36,733,8,36,1,36,1,36,3,36,737,8,36,1,36,1,36,1,36,3,
        36,742,8,36,1,36,1,36,3,36,746,8,36,1,36,3,36,749,8,36,1,37,1,37,
        1,38,1,38,5,38,755,8,38,10,38,12,38,758,9,38,1,38,5,38,761,8,38,
        10,38,12,38,764,9,38,1,38,3,38,767,8,38,1,38,1,38,5,38,771,8,38,
        10,38,12,38,774,9,38,1,38,3,38,777,8,38,1,38,4,38,780,8,38,11,38,
        12,38,781,1,38,5,38,785,8,38,10,38,12,38,788,9,38,1,38,3,38,791,
        8,38,1,38,4,38,794,8,38,11,38,12,38,795,1,38,3,38,799,8,38,1,38,
        3,38,802,8,38,1,39,4,39,805,8,39,11,39,12,39,806,1,39,1,39,3,39,
        811,8,39,1,40,5,40,814,8,40,10,40,12,40,817,9,40,1,40,4,40,820,8,
        40,11,40,12,40,821,1,40,1,40,3,40,826,8,40,1,41,1,41,1,41,5,41,831,
        8,41,10,41,12,41,834,9,41,1,41,3,41,837,8,41,1,41,1,41,1,41,5,41,
        842,8,41,10,41,12,41,845,9,41,1,41,3,41,848,8,41,1,41,1,41,1,41,
        4,41,853,8,41,11,41,12,41,854,1,41,3,41,858,8,41,1,41,3,41,861,8,
        41,1,42,1,42,1,42,1,43,1,43,3,43,868,8,43,1,43,3,43,871,8,43,1,44,
        1,44,3,44,875,8,44,1,44,3,44,878,8,44,1,45,1,45,1,45,3,45,883,8,
        45,1,45,3,45,886,8,45,1,46,1,46,3,46,890,8,46,1,46,3,46,893,8,46,
        1,46,3,46,896,8,46,1,47,1,47,3,47,900,8,47,1,48,1,48,1,48,1,49,1,
        49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,
        52,3,52,920,8,52,3,52,922,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,
        930,8,53,3,53,932,8,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,
        55,3,55,943,8,55,1,56,3,56,946,8,56,1,56,1,56,1,56,1,56,1,56,1,56,
        3,56,954,8,56,1,56,1,56,3,56,958,8,56,1,57,3,57,961,8,57,1,57,1,
        57,1,57,1,57,1,57,5,57,968,8,57,10,57,12,57,971,9,57,1,57,3,57,974,
        8,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,982,8,57,10,57,12,57,985,
        9,57,1,57,1,57,3,57,989,8,57,3,57,991,8,57,1,57,1,57,1,58,1,58,1,
        58,3,58,998,8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,4,
        59,1009,8,59,11,59,12,59,1010,1,59,3,59,1014,8,59,1,59,3,59,1017,
        8,59,1,59,1,59,1,59,1,59,4,59,1023,8,59,11,59,12,59,1024,1,59,3,
        59,1028,8,59,1,59,3,59,1031,8,59,3,59,1033,8,59,1,60,1,60,1,60,1,
        60,3,60,1039,8,60,3,60,1041,8,60,1,60,1,60,1,60,1,61,1,61,1,61,1,
        61,1,61,3,61,1051,8,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,63,1,
        63,1,63,1,63,1,63,1,63,4,63,1066,8,63,11,63,12,63,1067,1,63,1,63,
        1,64,1,64,1,64,3,64,1075,8,64,1,64,3,64,1078,8,64,1,65,1,65,1,65,
        3,65,1083,8,65,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,3,67,1093,
        8,67,1,68,1,68,3,68,1097,8,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,
        5,70,1106,8,70,10,70,12,70,1109,9,70,1,71,1,71,1,71,1,71,1,71,1,
        71,1,71,1,71,3,71,1119,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,
        72,1128,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1137,8,73,1,
        74,3,74,1140,8,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,3,76,1150,
        8,76,1,76,1,76,1,77,3,77,1155,8,77,1,77,1,77,1,78,1,78,1,79,1,79,
        1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,84,4,84,1174,
        8,84,11,84,12,84,1175,1,85,1,85,1,85,5,85,1181,8,85,10,85,12,85,
        1184,9,85,1,86,1,86,1,86,1,86,1,87,1,87,3,87,1192,8,87,1,87,1,87,
        1,87,3,87,1197,8,87,1,87,3,87,1200,8,87,1,88,1,88,1,88,3,88,1205,
        8,88,1,89,1,89,1,89,5,89,1210,8,89,10,89,12,89,1213,9,89,1,89,3,
        89,1216,8,89,1,90,1,90,3,90,1220,8,90,1,91,1,91,1,91,1,91,3,91,1226,
        8,91,1,92,1,92,1,92,1,92,1,92,3,92,1233,8,92,1,92,1,92,1,92,1,92,
        1,92,1,92,3,92,1241,8,92,1,92,3,92,1244,8,92,1,92,1,92,3,92,1248,
        8,92,1,93,1,93,1,93,5,93,1253,8,93,10,93,12,93,1256,9,93,1,94,1,
        94,3,94,1260,8,94,1,94,1,94,1,94,1,95,1,95,1,95,1,96,1,96,1,96,1,
        96,1,96,3,96,1273,8,96,1,96,3,96,1276,8,96,1,96,3,96,1279,8,96,3,
        96,1281,8,96,1,96,1,96,1,97,1,97,1,97,5,97,1288,8,97,10,97,12,97,
        1291,9,97,1,98,1,98,1,98,5,98,1296,8,98,10,98,12,98,1299,9,98,1,
        99,1,99,1,99,1,99,1,100,1,100,1,100,3,100,1308,8,100,1,100,1,100,
        1,100,1,101,1,101,1,101,1,101,1,102,1,102,1,102,5,102,1320,8,102,
        10,102,12,102,1323,9,102,1,102,3,102,1326,8,102,1,103,1,103,3,103,
        1330,8,103,1,103,1,103,1,103,1,103,3,103,1336,8,103,1,103,1,103,
        1,103,1,103,3,103,1342,8,103,3,103,1344,8,103,1,104,1,104,1,104,
        1,105,1,105,1,105,5,105,1352,8,105,10,105,12,105,1355,9,105,1,105,
        3,105,1358,8,105,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1366,
        8,106,1,106,3,106,1369,8,106,1,107,1,107,1,107,1,107,3,107,1375,
        8,107,3,107,1377,8,107,1,108,1,108,1,108,5,108,1382,8,108,10,108,
        12,108,1385,9,108,1,108,3,108,1388,8,108,1,109,1,109,1,109,3,109,
        1393,8,109,1,110,1,110,1,110,5,110,1398,8,110,10,110,12,110,1401,
        9,110,1,110,3,110,1404,8,110,1,111,1,111,1,111,3,111,1409,8,111,
        1,112,1,112,1,112,1,112,1,113,1,113,3,113,1417,8,113,1,114,1,114,
        1,114,5,114,1422,8,114,10,114,12,114,1425,9,114,1,115,1,115,1,115,
        5,115,1430,8,115,10,115,12,115,1433,9,115,1,116,1,116,1,116,3,116,
        1438,8,116,1,117,1,117,5,117,1442,8,117,10,117,12,117,1445,9,117,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,
        1457,8,118,1,119,1,119,1,119,1,120,1,120,1,120,1,121,1,121,1,121,
        1,122,1,122,1,122,1,123,1,123,1,123,1,124,1,124,1,124,1,125,1,125,
        1,125,1,125,1,126,1,126,1,126,1,127,1,127,1,127,1,127,1,128,1,128,
        1,128,1,129,1,129,1,129,1,129,1,129,1,129,5,129,1497,8,129,10,129,
        12,129,1500,9,129,1,130,1,130,1,130,1,130,1,130,1,130,5,130,1508,
        8,130,10,130,12,130,1511,9,130,1,131,1,131,1,131,1,131,1,131,1,131,
        5,131,1519,8,131,10,131,12,131,1522,9,131,1,132,1,132,1,132,1,132,
        1,132,1,132,5,132,1530,8,132,10,132,12,132,1533,9,132,1,133,1,133,
        1,133,1,133,1,133,1,133,5,133,1541,8,133,10,133,12,133,1544,9,133,
        1,134,1,134,1,134,1,134,1,134,1,134,5,134,1552,8,134,10,134,12,134,
        1555,9,134,1,135,1,135,1,135,1,135,1,135,1,135,5,135,1563,8,135,
        10,135,12,135,1566,9,135,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
        3,136,1575,8,136,1,137,1,137,1,137,3,137,1580,8,137,1,138,1,138,
        1,138,3,138,1585,8,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,3,139,1596,8,139,1,139,1,139,1,139,1,139,1,139,3,139,
        1603,8,139,5,139,1605,8,139,10,139,12,139,1608,9,139,1,140,1,140,
        1,140,3,140,1613,8,140,1,140,1,140,1,140,3,140,1618,8,140,5,140,
        1620,8,140,10,140,12,140,1623,9,140,1,140,3,140,1626,8,140,3,140,
        1628,8,140,1,141,3,141,1631,8,141,1,141,1,141,3,141,1635,8,141,1,
        141,1,141,3,141,1639,8,141,3,141,1641,8,141,1,141,3,141,1644,8,141,
        1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,
        1656,8,142,1,142,1,142,3,142,1660,8,142,1,142,1,142,1,142,1,142,
        3,142,1666,8,142,1,142,3,142,1669,8,142,1,143,1,143,1,143,1,144,
        1,144,1,144,3,144,1677,8,144,1,144,1,144,1,145,1,145,3,145,1683,
        8,145,1,145,1,145,1,145,1,146,1,146,1,147,1,147,5,147,1692,8,147,
        10,147,12,147,1695,9,147,1,147,5,147,1698,8,147,10,147,12,147,1701,
        9,147,1,147,3,147,1704,8,147,1,147,1,147,5,147,1708,8,147,10,147,
        12,147,1711,9,147,1,147,3,147,1714,8,147,1,147,4,147,1717,8,147,
        11,147,12,147,1718,1,147,5,147,1722,8,147,10,147,12,147,1725,9,147,
        1,147,3,147,1728,8,147,1,147,4,147,1731,8,147,11,147,12,147,1732,
        1,147,3,147,1736,8,147,1,147,3,147,1739,8,147,1,148,4,148,1742,8,
        148,11,148,12,148,1743,1,148,1,148,3,148,1748,8,148,1,149,5,149,
        1751,8,149,10,149,12,149,1754,9,149,1,149,4,149,1757,8,149,11,149,
        12,149,1758,1,149,1,149,3,149,1763,8,149,1,150,1,150,1,150,5,150,
        1768,8,150,10,150,12,150,1771,9,150,1,150,3,150,1774,8,150,1,150,
        1,150,1,150,4,150,1779,8,150,11,150,12,150,1780,1,150,3,150,1784,
        8,150,1,150,3,150,1787,8,150,1,151,1,151,1,151,1,152,1,152,3,152,
        1794,8,152,1,153,1,153,1,153,3,153,1799,8,153,1,154,1,154,3,154,
        1803,8,154,1,154,3,154,1806,8,154,1,155,1,155,1,156,1,156,3,156,
        1812,8,156,1,157,1,157,1,157,3,157,1817,8,157,1,157,3,157,1820,8,
        157,1,157,3,157,1823,8,157,1,157,3,157,1826,8,157,1,157,1,157,1,
        158,1,158,1,158,1,159,1,159,5,159,1835,8,159,10,159,12,159,1838,
        9,159,1,160,1,160,3,160,1842,8,160,1,161,1,161,5,161,1846,8,161,
        10,161,12,161,1849,9,161,1,161,1,161,1,162,1,162,1,163,1,163,4,163,
        1857,8,163,11,163,12,163,1858,1,164,1,164,3,164,1863,8,164,1,164,
        1,164,1,165,1,165,1,165,1,165,3,165,1871,8,165,3,165,1873,8,165,
        1,165,1,165,1,166,1,166,1,166,1,166,1,167,1,167,3,167,1883,8,167,
        1,167,1,167,1,168,1,168,1,168,5,168,1890,8,168,10,168,12,168,1893,
        9,168,1,168,3,168,1896,8,168,1,169,1,169,1,169,3,169,1901,8,169,
        1,170,1,170,1,170,1,170,1,171,4,171,1908,8,171,11,171,12,171,1909,
        1,172,3,172,1913,8,172,1,172,1,172,1,172,1,172,1,172,1,172,5,172,
        1921,8,172,10,172,12,172,1924,9,172,1,173,1,173,1,173,1,173,1,173,
        1,174,1,174,1,174,1,174,1,174,1,175,1,175,1,175,3,175,1939,8,175,
        1,175,1,175,1,175,1,176,1,176,1,176,1,176,1,176,1,177,1,177,3,177,
        1951,8,177,1,178,1,178,1,178,3,178,1956,8,178,3,178,1958,8,178,1,
        178,1,178,1,178,1,178,3,178,1964,8,178,3,178,1966,8,178,5,178,1968,
        8,178,10,178,12,178,1971,9,178,1,178,1,178,3,178,1975,8,178,1,178,
        3,178,1978,8,178,1,179,1,179,1,179,5,179,1983,8,179,10,179,12,179,
        1986,9,179,1,179,1,179,1,179,1,179,5,179,1992,8,179,10,179,12,179,
        1995,9,179,3,179,1997,8,179,1,179,1,179,1,179,5,179,2002,8,179,10,
        179,12,179,2005,9,179,3,179,2007,8,179,1,180,1,180,1,180,1,181,1,
        181,1,181,1,181,3,181,2016,8,181,1,182,1,182,1,182,1,182,1,182,3,
        182,2023,8,182,1,183,1,183,1,183,5,183,2028,8,183,10,183,12,183,
        2031,9,183,1,183,3,183,2034,8,183,1,184,1,184,1,184,4,184,2039,8,
        184,11,184,12,184,2040,1,184,3,184,2044,8,184,1,185,1,185,1,185,
        1,185,4,185,2050,8,185,11,185,12,185,2051,1,185,3,185,2055,8,185,
        3,185,2057,8,185,1,186,1,186,1,186,3,186,2062,8,186,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,3,187,2071,8,187,1,187,3,187,2074,
        8,187,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,2083,8,188,
        1,188,1,188,1,188,3,188,2088,8,188,1,188,3,188,2091,8,188,1,189,
        1,189,1,189,1,189,1,189,1,189,3,189,2099,8,189,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,3,190,2108,8,190,1,191,1,191,1,191,1,191,
        1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,3,191,2123,
        8,191,1,191,3,191,2126,8,191,5,191,2128,8,191,10,191,12,191,2131,
        9,191,1,192,1,192,1,192,5,192,2136,8,192,10,192,12,192,2139,9,192,
        1,192,3,192,2142,8,192,1,193,1,193,1,193,1,193,1,193,1,193,1,193,
        3,193,2151,8,193,1,193,3,193,2154,8,193,1,194,1,194,1,194,1,194,
        1,194,1,194,1,194,3,194,2163,8,194,1,194,1,194,1,194,3,194,2168,
        8,194,1,194,3,194,2171,8,194,1,195,1,195,1,195,5,195,2176,8,195,
        10,195,12,195,2179,9,195,1,195,1,195,1,195,1,195,1,195,1,195,3,195,
        2187,8,195,1,195,1,195,3,195,2191,8,195,3,195,2193,8,195,1,195,1,
        195,1,195,1,195,1,195,3,195,2200,8,195,1,195,1,195,3,195,2204,8,
        195,1,196,1,196,1,196,3,196,2209,8,196,1,197,1,197,1,197,1,198,1,
        198,1,198,1,199,1,199,1,199,1,200,1,200,1,200,1,201,1,201,1,201,
        1,201,0,10,60,258,260,262,264,266,268,270,278,382,202,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
        324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
        356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
        388,390,392,394,396,398,400,402,0,7,3,0,72,82,84,84,86,86,2,0,49,
        49,88,88,2,0,93,93,95,95,1,0,53,54,1,0,69,70,4,0,55,56,62,62,83,
        83,85,85,2,0,42,42,91,92,2401,0,405,1,0,0,0,2,409,1,0,0,0,4,411,
        1,0,0,0,6,420,1,0,0,0,8,435,1,0,0,0,10,438,1,0,0,0,12,444,1,0,0,
        0,14,452,1,0,0,0,16,454,1,0,0,0,18,482,1,0,0,0,20,492,1,0,0,0,22,
        534,1,0,0,0,24,538,1,0,0,0,26,540,1,0,0,0,28,542,1,0,0,0,30,546,
        1,0,0,0,32,554,1,0,0,0,34,563,1,0,0,0,36,572,1,0,0,0,38,575,1,0,
        0,0,40,577,1,0,0,0,42,585,1,0,0,0,44,587,1,0,0,0,46,594,1,0,0,0,
        48,616,1,0,0,0,50,627,1,0,0,0,52,629,1,0,0,0,54,637,1,0,0,0,56,642,
        1,0,0,0,58,650,1,0,0,0,60,655,1,0,0,0,62,672,1,0,0,0,64,678,1,0,
        0,0,66,686,1,0,0,0,68,688,1,0,0,0,70,707,1,0,0,0,72,748,1,0,0,0,
        74,750,1,0,0,0,76,801,1,0,0,0,78,804,1,0,0,0,80,815,1,0,0,0,82,860,
        1,0,0,0,84,862,1,0,0,0,86,865,1,0,0,0,88,872,1,0,0,0,90,879,1,0,
        0,0,92,887,1,0,0,0,94,897,1,0,0,0,96,901,1,0,0,0,98,904,1,0,0,0,
        100,907,1,0,0,0,102,910,1,0,0,0,104,913,1,0,0,0,106,923,1,0,0,0,
        108,933,1,0,0,0,110,937,1,0,0,0,112,945,1,0,0,0,114,960,1,0,0,0,
        116,994,1,0,0,0,118,1032,1,0,0,0,120,1034,1,0,0,0,122,1045,1,0,0,
        0,124,1055,1,0,0,0,126,1059,1,0,0,0,128,1077,1,0,0,0,130,1079,1,
        0,0,0,132,1087,1,0,0,0,134,1092,1,0,0,0,136,1096,1,0,0,0,138,1098,
        1,0,0,0,140,1102,1,0,0,0,142,1118,1,0,0,0,144,1127,1,0,0,0,146,1136,
        1,0,0,0,148,1139,1,0,0,0,150,1144,1,0,0,0,152,1149,1,0,0,0,154,1154,
        1,0,0,0,156,1158,1,0,0,0,158,1160,1,0,0,0,160,1162,1,0,0,0,162,1164,
        1,0,0,0,164,1166,1,0,0,0,166,1168,1,0,0,0,168,1170,1,0,0,0,170,1177,
        1,0,0,0,172,1185,1,0,0,0,174,1199,1,0,0,0,176,1201,1,0,0,0,178,1206,
        1,0,0,0,180,1219,1,0,0,0,182,1225,1,0,0,0,184,1247,1,0,0,0,186,1249,
        1,0,0,0,188,1259,1,0,0,0,190,1264,1,0,0,0,192,1267,1,0,0,0,194,1284,
        1,0,0,0,196,1292,1,0,0,0,198,1300,1,0,0,0,200,1304,1,0,0,0,202,1312,
        1,0,0,0,204,1316,1,0,0,0,206,1343,1,0,0,0,208,1345,1,0,0,0,210,1348,
        1,0,0,0,212,1368,1,0,0,0,214,1370,1,0,0,0,216,1378,1,0,0,0,218,1392,
        1,0,0,0,220,1394,1,0,0,0,222,1408,1,0,0,0,224,1410,1,0,0,0,226,1416,
        1,0,0,0,228,1418,1,0,0,0,230,1426,1,0,0,0,232,1437,1,0,0,0,234,1439,
        1,0,0,0,236,1456,1,0,0,0,238,1458,1,0,0,0,240,1461,1,0,0,0,242,1464,
        1,0,0,0,244,1467,1,0,0,0,246,1470,1,0,0,0,248,1473,1,0,0,0,250,1476,
        1,0,0,0,252,1480,1,0,0,0,254,1483,1,0,0,0,256,1487,1,0,0,0,258,1490,
        1,0,0,0,260,1501,1,0,0,0,262,1512,1,0,0,0,264,1523,1,0,0,0,266,1534,
        1,0,0,0,268,1545,1,0,0,0,270,1556,1,0,0,0,272,1574,1,0,0,0,274,1576,
        1,0,0,0,276,1584,1,0,0,0,278,1586,1,0,0,0,280,1627,1,0,0,0,282,1643,
        1,0,0,0,284,1668,1,0,0,0,286,1670,1,0,0,0,288,1673,1,0,0,0,290,1680,
        1,0,0,0,292,1687,1,0,0,0,294,1738,1,0,0,0,296,1741,1,0,0,0,298,1752,
        1,0,0,0,300,1786,1,0,0,0,302,1788,1,0,0,0,304,1791,1,0,0,0,306,1795,
        1,0,0,0,308,1800,1,0,0,0,310,1807,1,0,0,0,312,1811,1,0,0,0,314,1813,
        1,0,0,0,316,1829,1,0,0,0,318,1832,1,0,0,0,320,1841,1,0,0,0,322,1843,
        1,0,0,0,324,1852,1,0,0,0,326,1856,1,0,0,0,328,1860,1,0,0,0,330,1866,
        1,0,0,0,332,1876,1,0,0,0,334,1880,1,0,0,0,336,1886,1,0,0,0,338,1900,
        1,0,0,0,340,1902,1,0,0,0,342,1907,1,0,0,0,344,1912,1,0,0,0,346,1925,
        1,0,0,0,348,1930,1,0,0,0,350,1935,1,0,0,0,352,1943,1,0,0,0,354,1948,
        1,0,0,0,356,1977,1,0,0,0,358,2006,1,0,0,0,360,2008,1,0,0,0,362,2015,
        1,0,0,0,364,2022,1,0,0,0,366,2024,1,0,0,0,368,2035,1,0,0,0,370,2045,
        1,0,0,0,372,2061,1,0,0,0,374,2073,1,0,0,0,376,2090,1,0,0,0,378,2098,
        1,0,0,0,380,2100,1,0,0,0,382,2109,1,0,0,0,384,2132,1,0,0,0,386,2153,
        1,0,0,0,388,2170,1,0,0,0,390,2203,1,0,0,0,392,2208,1,0,0,0,394,2210,
        1,0,0,0,396,2213,1,0,0,0,398,2216,1,0,0,0,400,2219,1,0,0,0,402,2222,
        1,0,0,0,404,406,3,10,5,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,
        1,0,0,0,407,408,5,0,0,1,408,1,1,0,0,0,409,410,3,14,7,0,410,3,1,0,
        0,0,411,415,3,210,105,0,412,414,5,97,0,0,413,412,1,0,0,0,414,417,
        1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,415,
        1,0,0,0,418,419,5,0,0,1,419,5,1,0,0,0,420,422,5,43,0,0,421,423,3,
        390,195,0,422,421,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,425,
        5,46,0,0,425,426,5,87,0,0,426,430,3,212,106,0,427,429,5,97,0,0,428,
        427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,
        433,1,0,0,0,432,430,1,0,0,0,433,434,5,0,0,1,434,7,1,0,0,0,435,436,
        3,216,108,0,436,9,1,0,0,0,437,439,3,12,6,0,438,437,1,0,0,0,439,440,
        1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,11,1,0,0,0,442,445,3,
        20,10,0,443,445,3,16,8,0,444,442,1,0,0,0,444,443,1,0,0,0,445,13,
        1,0,0,0,446,447,3,20,10,0,447,448,5,97,0,0,448,453,1,0,0,0,449,453,
        3,16,8,0,450,453,5,97,0,0,451,453,5,0,0,1,452,446,1,0,0,0,452,449,
        1,0,0,0,452,450,1,0,0,0,452,451,1,0,0,0,453,15,1,0,0,0,454,459,3,
        18,9,0,455,456,5,52,0,0,456,458,3,18,9,0,457,455,1,0,0,0,458,461,
        1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,463,1,0,0,0,461,459,
        1,0,0,0,462,464,5,52,0,0,463,462,1,0,0,0,463,464,1,0,0,0,464,465,
        1,0,0,0,465,466,5,97,0,0,466,17,1,0,0,0,467,483,3,22,11,0,468,483,
        3,200,100,0,469,483,3,216,108,0,470,483,3,28,14,0,471,483,3,42,21,
        0,472,483,3,30,15,0,473,483,5,10,0,0,474,483,3,36,18,0,475,483,3,
        38,19,0,476,483,3,40,20,0,477,483,5,12,0,0,478,483,5,22,0,0,479,
        483,3,32,16,0,480,483,3,34,17,0,481,483,3,44,22,0,482,467,1,0,0,
        0,482,468,1,0,0,0,482,469,1,0,0,0,482,470,1,0,0,0,482,471,1,0,0,
        0,482,472,1,0,0,0,482,473,1,0,0,0,482,474,1,0,0,0,482,475,1,0,0,
        0,482,476,1,0,0,0,482,477,1,0,0,0,482,478,1,0,0,0,482,479,1,0,0,
        0,482,480,1,0,0,0,482,481,1,0,0,0,483,19,1,0,0,0,484,493,3,70,35,
        0,485,493,3,104,52,0,486,493,3,66,33,0,487,493,3,114,57,0,488,493,
        3,112,56,0,489,493,3,118,59,0,490,493,3,110,55,0,491,493,3,126,63,
        0,492,484,1,0,0,0,492,485,1,0,0,0,492,486,1,0,0,0,492,487,1,0,0,
        0,492,488,1,0,0,0,492,489,1,0,0,0,492,490,1,0,0,0,492,491,1,0,0,
        0,493,21,1,0,0,0,494,495,5,93,0,0,495,496,5,50,0,0,496,499,3,212,
        106,0,497,498,5,61,0,0,498,500,3,24,12,0,499,497,1,0,0,0,499,500,
        1,0,0,0,500,535,1,0,0,0,501,502,5,43,0,0,502,503,3,378,189,0,503,
        504,5,46,0,0,504,507,1,0,0,0,505,507,3,380,190,0,506,501,1,0,0,0,
        506,505,1,0,0,0,507,508,1,0,0,0,508,509,5,50,0,0,509,512,3,212,106,
        0,510,511,5,61,0,0,511,513,3,24,12,0,512,510,1,0,0,0,512,513,1,0,
        0,0,513,535,1,0,0,0,514,515,3,366,183,0,515,516,5,61,0,0,516,518,
        1,0,0,0,517,514,1,0,0,0,518,519,1,0,0,0,519,517,1,0,0,0,519,520,
        1,0,0,0,520,523,1,0,0,0,521,524,3,214,107,0,522,524,3,216,108,0,
        523,521,1,0,0,0,523,522,1,0,0,0,524,526,1,0,0,0,525,527,5,96,0,0,
        526,525,1,0,0,0,526,527,1,0,0,0,527,535,1,0,0,0,528,529,3,378,189,
        0,529,532,3,26,13,0,530,533,3,214,107,0,531,533,3,216,108,0,532,
        530,1,0,0,0,532,531,1,0,0,0,533,535,1,0,0,0,534,494,1,0,0,0,534,
        506,1,0,0,0,534,517,1,0,0,0,534,528,1,0,0,0,535,23,1,0,0,0,536,539,
        3,214,107,0,537,539,3,216,108,0,538,536,1,0,0,0,538,537,1,0,0,0,
        539,25,1,0,0,0,540,541,7,0,0,0,541,27,1,0,0,0,542,544,5,20,0,0,543,
        545,3,216,108,0,544,543,1,0,0,0,544,545,1,0,0,0,545,29,1,0,0,0,546,
        552,5,15,0,0,547,550,3,212,106,0,548,549,5,28,0,0,549,551,3,212,
        106,0,550,548,1,0,0,0,550,551,1,0,0,0,551,553,1,0,0,0,552,547,1,
        0,0,0,552,553,1,0,0,0,553,31,1,0,0,0,554,555,5,33,0,0,555,560,5,
        93,0,0,556,557,5,51,0,0,557,559,5,93,0,0,558,556,1,0,0,0,559,562,
        1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,33,1,0,0,0,562,560,1,
        0,0,0,563,564,5,29,0,0,564,569,5,93,0,0,565,566,5,51,0,0,566,568,
        5,93,0,0,567,565,1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,0,569,570,
        1,0,0,0,570,35,1,0,0,0,571,569,1,0,0,0,572,573,5,32,0,0,573,574,
        3,384,192,0,574,37,1,0,0,0,575,576,3,214,107,0,576,39,1,0,0,0,577,
        578,5,31,0,0,578,581,3,212,106,0,579,580,5,51,0,0,580,582,3,212,
        106,0,581,579,1,0,0,0,581,582,1,0,0,0,582,41,1,0,0,0,583,586,3,46,
        23,0,584,586,3,48,24,0,585,583,1,0,0,0,585,584,1,0,0,0,586,43,1,
        0,0,0,587,590,3,212,106,0,588,589,5,67,0,0,589,591,3,212,106,0,590,
        588,1,0,0,0,591,592,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,
        45,1,0,0,0,594,595,5,9,0,0,595,596,3,56,28,0,596,47,1,0,0,0,597,
        601,5,28,0,0,598,600,7,1,0,0,599,598,1,0,0,0,600,603,1,0,0,0,601,
        599,1,0,0,0,601,602,1,0,0,0,602,604,1,0,0,0,603,601,1,0,0,0,604,
        605,3,60,30,0,605,606,5,9,0,0,606,607,3,50,25,0,607,617,1,0,0,0,
        608,610,5,28,0,0,609,611,7,1,0,0,610,609,1,0,0,0,611,612,1,0,0,0,
        612,610,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,615,5,9,0,0,
        615,617,3,50,25,0,616,597,1,0,0,0,616,608,1,0,0,0,617,49,1,0,0,0,
        618,619,5,43,0,0,619,621,3,52,26,0,620,622,5,51,0,0,621,620,1,0,
        0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,624,5,46,0,0,624,628,1,0,
        0,0,625,628,3,52,26,0,626,628,5,55,0,0,627,618,1,0,0,0,627,625,1,
        0,0,0,627,626,1,0,0,0,628,51,1,0,0,0,629,634,3,54,27,0,630,631,5,
        51,0,0,631,633,3,54,27,0,632,630,1,0,0,0,633,636,1,0,0,0,634,632,
        1,0,0,0,634,635,1,0,0,0,635,53,1,0,0,0,636,634,1,0,0,0,637,640,5,
        93,0,0,638,639,5,26,0,0,639,641,5,93,0,0,640,638,1,0,0,0,640,641,
        1,0,0,0,641,55,1,0,0,0,642,647,3,58,29,0,643,644,5,51,0,0,644,646,
        3,58,29,0,645,643,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,
        1,0,0,0,648,57,1,0,0,0,649,647,1,0,0,0,650,653,3,60,30,0,651,652,
        5,26,0,0,652,654,5,93,0,0,653,651,1,0,0,0,653,654,1,0,0,0,654,59,
        1,0,0,0,655,656,6,30,-1,0,656,657,5,93,0,0,657,663,1,0,0,0,658,659,
        10,2,0,0,659,660,5,49,0,0,660,662,5,93,0,0,661,658,1,0,0,0,662,665,
        1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,61,1,0,0,0,665,663,1,
        0,0,0,666,667,5,97,0,0,667,668,5,1,0,0,668,669,3,10,5,0,669,670,
        5,2,0,0,670,673,1,0,0,0,671,673,3,16,8,0,672,666,1,0,0,0,672,671,
        1,0,0,0,673,63,1,0,0,0,674,675,5,85,0,0,675,676,3,226,113,0,676,
        677,5,97,0,0,677,679,1,0,0,0,678,674,1,0,0,0,679,680,1,0,0,0,680,
        678,1,0,0,0,680,681,1,0,0,0,681,65,1,0,0,0,682,683,3,64,32,0,683,
        684,3,68,34,0,684,687,1,0,0,0,685,687,3,68,34,0,686,682,1,0,0,0,
        686,685,1,0,0,0,687,67,1,0,0,0,688,689,5,17,0,0,689,691,5,93,0,0,
        690,692,3,202,101,0,691,690,1,0,0,0,691,692,1,0,0,0,692,698,1,0,
        0,0,693,695,5,43,0,0,694,696,3,354,177,0,695,694,1,0,0,0,695,696,
        1,0,0,0,696,697,1,0,0,0,697,699,5,46,0,0,698,693,1,0,0,0,698,699,
        1,0,0,0,699,700,1,0,0,0,700,701,5,50,0,0,701,702,3,62,31,0,702,69,
        1,0,0,0,703,704,3,64,32,0,704,705,3,72,36,0,705,708,1,0,0,0,706,
        708,3,72,36,0,707,703,1,0,0,0,707,706,1,0,0,0,708,71,1,0,0,0,709,
        710,5,27,0,0,710,712,5,93,0,0,711,713,3,202,101,0,712,711,1,0,0,
        0,712,713,1,0,0,0,713,714,1,0,0,0,714,716,5,43,0,0,715,717,3,74,
        37,0,716,715,1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,0,718,721,5,46,
        0,0,719,720,5,87,0,0,720,722,3,212,106,0,721,719,1,0,0,0,721,722,
        1,0,0,0,722,723,1,0,0,0,723,725,5,50,0,0,724,726,3,392,196,0,725,
        724,1,0,0,0,725,726,1,0,0,0,726,727,1,0,0,0,727,749,3,62,31,0,728,
        729,5,36,0,0,729,730,5,27,0,0,730,732,5,93,0,0,731,733,3,202,101,
        0,732,731,1,0,0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,736,5,43,0,
        0,735,737,3,74,37,0,736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,
        0,0,738,741,5,46,0,0,739,740,5,87,0,0,740,742,3,212,106,0,741,739,
        1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,745,5,50,0,0,744,746,
        3,392,196,0,745,744,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,
        749,3,62,31,0,748,709,1,0,0,0,748,728,1,0,0,0,749,73,1,0,0,0,750,
        751,3,76,38,0,751,75,1,0,0,0,752,756,3,78,39,0,753,755,3,86,43,0,
        754,753,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,0,0,0,
        757,762,1,0,0,0,758,756,1,0,0,0,759,761,3,90,45,0,760,759,1,0,0,
        0,761,764,1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,766,1,0,0,
        0,764,762,1,0,0,0,765,767,3,82,41,0,766,765,1,0,0,0,766,767,1,0,
        0,0,767,802,1,0,0,0,768,772,3,80,40,0,769,771,3,90,45,0,770,769,
        1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,776,
        1,0,0,0,774,772,1,0,0,0,775,777,3,82,41,0,776,775,1,0,0,0,776,777,
        1,0,0,0,777,802,1,0,0,0,778,780,3,86,43,0,779,778,1,0,0,0,780,781,
        1,0,0,0,781,779,1,0,0,0,781,782,1,0,0,0,782,786,1,0,0,0,783,785,
        3,90,45,0,784,783,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,786,787,
        1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,789,791,3,82,41,0,790,789,
        1,0,0,0,790,791,1,0,0,0,791,802,1,0,0,0,792,794,3,90,45,0,793,792,
        1,0,0,0,794,795,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,798,
        1,0,0,0,797,799,3,82,41,0,798,797,1,0,0,0,798,799,1,0,0,0,799,802,
        1,0,0,0,800,802,3,82,41,0,801,752,1,0,0,0,801,768,1,0,0,0,801,779,
        1,0,0,0,801,793,1,0,0,0,801,800,1,0,0,0,802,77,1,0,0,0,803,805,3,
        86,43,0,804,803,1,0,0,0,805,806,1,0,0,0,806,804,1,0,0,0,806,807,
        1,0,0,0,807,808,1,0,0,0,808,810,5,56,0,0,809,811,5,51,0,0,810,809,
        1,0,0,0,810,811,1,0,0,0,811,79,1,0,0,0,812,814,3,86,43,0,813,812,
        1,0,0,0,814,817,1,0,0,0,815,813,1,0,0,0,815,816,1,0,0,0,816,819,
        1,0,0,0,817,815,1,0,0,0,818,820,3,90,45,0,819,818,1,0,0,0,820,821,
        1,0,0,0,821,819,1,0,0,0,821,822,1,0,0,0,822,823,1,0,0,0,823,825,
        5,56,0,0,824,826,5,51,0,0,825,824,1,0,0,0,825,826,1,0,0,0,826,81,
        1,0,0,0,827,828,5,55,0,0,828,832,3,86,43,0,829,831,3,92,46,0,830,
        829,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,832,833,1,0,0,0,833,
        836,1,0,0,0,834,832,1,0,0,0,835,837,3,84,42,0,836,835,1,0,0,0,836,
        837,1,0,0,0,837,861,1,0,0,0,838,839,5,55,0,0,839,843,3,88,44,0,840,
        842,3,92,46,0,841,840,1,0,0,0,842,845,1,0,0,0,843,841,1,0,0,0,843,
        844,1,0,0,0,844,847,1,0,0,0,845,843,1,0,0,0,846,848,3,84,42,0,847,
        846,1,0,0,0,847,848,1,0,0,0,848,861,1,0,0,0,849,850,5,55,0,0,850,
        852,5,51,0,0,851,853,3,92,46,0,852,851,1,0,0,0,853,854,1,0,0,0,854,
        852,1,0,0,0,854,855,1,0,0,0,855,857,1,0,0,0,856,858,3,84,42,0,857,
        856,1,0,0,0,857,858,1,0,0,0,858,861,1,0,0,0,859,861,3,84,42,0,860,
        827,1,0,0,0,860,838,1,0,0,0,860,849,1,0,0,0,860,859,1,0,0,0,861,
        83,1,0,0,0,862,863,5,71,0,0,863,864,3,86,43,0,864,85,1,0,0,0,865,
        867,3,94,47,0,866,868,5,51,0,0,867,866,1,0,0,0,867,868,1,0,0,0,868,
        870,1,0,0,0,869,871,5,96,0,0,870,869,1,0,0,0,870,871,1,0,0,0,871,
        87,1,0,0,0,872,874,3,96,48,0,873,875,5,51,0,0,874,873,1,0,0,0,874,
        875,1,0,0,0,875,877,1,0,0,0,876,878,5,96,0,0,877,876,1,0,0,0,877,
        878,1,0,0,0,878,89,1,0,0,0,879,880,3,94,47,0,880,882,3,102,51,0,
        881,883,5,51,0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,885,1,0,0,0,
        884,886,5,96,0,0,885,884,1,0,0,0,885,886,1,0,0,0,886,91,1,0,0,0,
        887,889,3,94,47,0,888,890,3,102,51,0,889,888,1,0,0,0,889,890,1,0,
        0,0,890,892,1,0,0,0,891,893,5,51,0,0,892,891,1,0,0,0,892,893,1,0,
        0,0,893,895,1,0,0,0,894,896,5,96,0,0,895,894,1,0,0,0,895,896,1,0,
        0,0,896,93,1,0,0,0,897,899,5,93,0,0,898,900,3,98,49,0,899,898,1,
        0,0,0,899,900,1,0,0,0,900,95,1,0,0,0,901,902,5,93,0,0,902,903,3,
        100,50,0,903,97,1,0,0,0,904,905,5,50,0,0,905,906,3,212,106,0,906,
        99,1,0,0,0,907,908,5,50,0,0,908,909,3,218,109,0,909,101,1,0,0,0,
        910,911,5,61,0,0,911,912,3,212,106,0,912,103,1,0,0,0,913,914,5,38,
        0,0,914,915,3,226,113,0,915,916,5,50,0,0,916,921,3,62,31,0,917,922,
        3,106,53,0,918,920,3,108,54,0,919,918,1,0,0,0,919,920,1,0,0,0,920,
        922,1,0,0,0,921,917,1,0,0,0,921,919,1,0,0,0,922,105,1,0,0,0,923,
        924,5,37,0,0,924,925,3,226,113,0,925,926,5,50,0,0,926,931,3,62,31,
        0,927,932,3,106,53,0,928,930,3,108,54,0,929,928,1,0,0,0,929,930,
        1,0,0,0,930,932,1,0,0,0,931,927,1,0,0,0,931,929,1,0,0,0,932,107,
        1,0,0,0,933,934,5,8,0,0,934,935,5,50,0,0,935,936,3,62,31,0,936,109,
        1,0,0,0,937,938,5,30,0,0,938,939,3,226,113,0,939,940,5,50,0,0,940,
        942,3,62,31,0,941,943,3,108,54,0,942,941,1,0,0,0,942,943,1,0,0,0,
        943,111,1,0,0,0,944,946,5,36,0,0,945,944,1,0,0,0,945,946,1,0,0,0,
        946,947,1,0,0,0,947,948,5,23,0,0,948,949,3,366,183,0,949,950,5,14,
        0,0,950,951,3,216,108,0,951,953,5,50,0,0,952,954,5,96,0,0,953,952,
        1,0,0,0,953,954,1,0,0,0,954,955,1,0,0,0,955,957,3,62,31,0,956,958,
        3,108,54,0,957,956,1,0,0,0,957,958,1,0,0,0,958,113,1,0,0,0,959,961,
        5,36,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,0,962,990,
        5,35,0,0,963,964,5,43,0,0,964,969,3,116,58,0,965,966,5,51,0,0,966,
        968,3,116,58,0,967,965,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,969,
        970,1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,972,974,5,51,0,0,973,
        972,1,0,0,0,973,974,1,0,0,0,974,975,1,0,0,0,975,976,5,46,0,0,976,
        977,5,50,0,0,977,991,1,0,0,0,978,983,3,116,58,0,979,980,5,51,0,0,
        980,982,3,116,58,0,981,979,1,0,0,0,982,985,1,0,0,0,983,981,1,0,0,
        0,983,984,1,0,0,0,984,986,1,0,0,0,985,983,1,0,0,0,986,988,5,50,0,
        0,987,989,5,96,0,0,988,987,1,0,0,0,988,989,1,0,0,0,989,991,1,0,0,
        0,990,963,1,0,0,0,990,978,1,0,0,0,991,992,1,0,0,0,992,993,3,62,31,
        0,993,115,1,0,0,0,994,997,3,212,106,0,995,996,5,26,0,0,996,998,3,
        372,186,0,997,995,1,0,0,0,997,998,1,0,0,0,998,117,1,0,0,0,999,1000,
        5,25,0,0,1000,1001,5,50,0,0,1001,1002,3,62,31,0,1002,1003,3,124,
        62,0,1003,1033,1,0,0,0,1004,1005,5,25,0,0,1005,1006,5,50,0,0,1006,
        1008,3,62,31,0,1007,1009,3,120,60,0,1008,1007,1,0,0,0,1009,1010,
        1,0,0,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,1013,1,0,0,0,1012,
        1014,3,108,54,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1016,1,
        0,0,0,1015,1017,3,124,62,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,1017,
        1033,1,0,0,0,1018,1019,5,25,0,0,1019,1020,5,50,0,0,1020,1022,3,62,
        31,0,1021,1023,3,122,61,0,1022,1021,1,0,0,0,1023,1024,1,0,0,0,1024,
        1022,1,0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1028,3,108,
        54,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1030,1,0,0,0,1029,
        1031,3,124,62,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1033,1,
        0,0,0,1032,999,1,0,0,0,1032,1004,1,0,0,0,1032,1018,1,0,0,0,1033,
        119,1,0,0,0,1034,1040,5,13,0,0,1035,1038,3,212,106,0,1036,1037,5,
        26,0,0,1037,1039,5,93,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,0,1039,
        1041,1,0,0,0,1040,1035,1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,0,0,
        0,1042,1043,5,50,0,0,1043,1044,3,62,31,0,1044,121,1,0,0,0,1045,1046,
        5,13,0,0,1046,1047,5,55,0,0,1047,1050,3,212,106,0,1048,1049,5,26,
        0,0,1049,1051,5,93,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,
        1052,1,0,0,0,1052,1053,5,50,0,0,1053,1054,3,62,31,0,1054,123,1,0,
        0,0,1055,1056,5,18,0,0,1056,1057,5,50,0,0,1057,1058,3,62,31,0,1058,
        125,1,0,0,0,1059,1060,3,396,198,0,1060,1061,3,128,64,0,1061,1062,
        5,50,0,0,1062,1063,5,97,0,0,1063,1065,5,1,0,0,1064,1066,3,130,65,
        0,1065,1064,1,0,0,0,1066,1067,1,0,0,0,1067,1065,1,0,0,0,1067,1068,
        1,0,0,0,1068,1069,1,0,0,0,1069,1070,5,2,0,0,1070,127,1,0,0,0,1071,
        1072,3,222,111,0,1072,1074,5,51,0,0,1073,1075,3,220,110,0,1074,1073,
        1,0,0,0,1074,1075,1,0,0,0,1075,1078,1,0,0,0,1076,1078,3,226,113,
        0,1077,1071,1,0,0,0,1077,1076,1,0,0,0,1078,129,1,0,0,0,1079,1080,
        3,398,199,0,1080,1082,3,134,67,0,1081,1083,3,132,66,0,1082,1081,
        1,0,0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,0,1084,1085,5,50,0,0,1085,
        1086,3,62,31,0,1086,131,1,0,0,0,1087,1088,5,38,0,0,1088,1089,3,226,
        113,0,1089,133,1,0,0,0,1090,1093,3,176,88,0,1091,1093,3,136,68,0,
        1092,1090,1,0,0,0,1092,1091,1,0,0,0,1093,135,1,0,0,0,1094,1097,3,
        138,69,0,1095,1097,3,140,70,0,1096,1094,1,0,0,0,1096,1095,1,0,0,
        0,1097,137,1,0,0,0,1098,1099,3,140,70,0,1099,1100,5,26,0,0,1100,
        1101,3,162,81,0,1101,139,1,0,0,0,1102,1107,3,142,71,0,1103,1104,
        5,57,0,0,1104,1106,3,142,71,0,1105,1103,1,0,0,0,1106,1109,1,0,0,
        0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,141,1,0,0,0,1109,1107,
        1,0,0,0,1110,1119,3,144,72,0,1111,1119,3,160,80,0,1112,1119,3,164,
        82,0,1113,1119,3,166,83,0,1114,1119,3,172,86,0,1115,1119,3,174,87,
        0,1116,1119,3,184,92,0,1117,1119,3,192,96,0,1118,1110,1,0,0,0,1118,
        1111,1,0,0,0,1118,1112,1,0,0,0,1118,1113,1,0,0,0,1118,1114,1,0,0,
        0,1118,1115,1,0,0,0,1118,1116,1,0,0,0,1118,1117,1,0,0,0,1119,143,
        1,0,0,0,1120,1128,3,152,76,0,1121,1128,3,148,74,0,1122,1128,3,150,
        75,0,1123,1128,3,326,163,0,1124,1128,5,11,0,0,1125,1128,5,16,0,0,
        1126,1128,5,6,0,0,1127,1120,1,0,0,0,1127,1121,1,0,0,0,1127,1122,
        1,0,0,0,1127,1123,1,0,0,0,1127,1124,1,0,0,0,1127,1125,1,0,0,0,1127,
        1126,1,0,0,0,1128,145,1,0,0,0,1129,1137,3,152,76,0,1130,1137,3,148,
        74,0,1131,1137,3,150,75,0,1132,1137,3,326,163,0,1133,1137,5,11,0,
        0,1134,1137,5,16,0,0,1135,1137,5,6,0,0,1136,1129,1,0,0,0,1136,1130,
        1,0,0,0,1136,1131,1,0,0,0,1136,1132,1,0,0,0,1136,1133,1,0,0,0,1136,
        1134,1,0,0,0,1136,1135,1,0,0,0,1137,147,1,0,0,0,1138,1140,5,54,0,
        0,1139,1138,1,0,0,0,1139,1140,1,0,0,0,1140,1141,1,0,0,0,1141,1142,
        5,94,0,0,1142,1143,7,2,0,0,1143,149,1,0,0,0,1144,1145,3,154,77,0,
        1145,1146,7,3,0,0,1146,1147,3,158,79,0,1147,151,1,0,0,0,1148,1150,
        5,54,0,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,1151,1,0,0,0,1151,
        1152,5,94,0,0,1152,153,1,0,0,0,1153,1155,5,54,0,0,1154,1153,1,0,
        0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,1157,3,156,78,0,1157,
        155,1,0,0,0,1158,1159,5,94,0,0,1159,157,1,0,0,0,1160,1161,5,94,0,
        0,1161,159,1,0,0,0,1162,1163,3,162,81,0,1163,161,1,0,0,0,1164,1165,
        3,402,201,0,1165,163,1,0,0,0,1166,1167,3,400,200,0,1167,165,1,0,
        0,0,1168,1169,3,168,84,0,1169,167,1,0,0,0,1170,1173,5,93,0,0,1171,
        1172,5,49,0,0,1172,1174,5,93,0,0,1173,1171,1,0,0,0,1174,1175,1,0,
        0,0,1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,169,1,0,0,0,1177,1182,
        5,93,0,0,1178,1179,5,49,0,0,1179,1181,5,93,0,0,1180,1178,1,0,0,0,
        1181,1184,1,0,0,0,1182,1180,1,0,0,0,1182,1183,1,0,0,0,1183,171,1,
        0,0,0,1184,1182,1,0,0,0,1185,1186,5,43,0,0,1186,1187,3,136,68,0,
        1187,1188,5,46,0,0,1188,173,1,0,0,0,1189,1191,5,44,0,0,1190,1192,
        3,178,89,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,1193,1,0,0,0,
        1193,1200,5,47,0,0,1194,1196,5,43,0,0,1195,1197,3,176,88,0,1196,
        1195,1,0,0,0,1196,1197,1,0,0,0,1197,1198,1,0,0,0,1198,1200,5,46,
        0,0,1199,1189,1,0,0,0,1199,1194,1,0,0,0,1200,175,1,0,0,0,1201,1202,
        3,180,90,0,1202,1204,5,51,0,0,1203,1205,3,178,89,0,1204,1203,1,0,
        0,0,1204,1205,1,0,0,0,1205,177,1,0,0,0,1206,1211,3,180,90,0,1207,
        1208,5,51,0,0,1208,1210,3,180,90,0,1209,1207,1,0,0,0,1210,1213,1,
        0,0,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,1215,1,0,0,0,1213,
        1211,1,0,0,0,1214,1216,5,51,0,0,1215,1214,1,0,0,0,1215,1216,1,0,
        0,0,1216,179,1,0,0,0,1217,1220,3,182,91,0,1218,1220,3,136,68,0,1219,
        1217,1,0,0,0,1219,1218,1,0,0,0,1220,181,1,0,0,0,1221,1222,5,55,0,
        0,1222,1226,3,162,81,0,1223,1224,5,55,0,0,1224,1226,3,164,82,0,1225,
        1221,1,0,0,0,1225,1223,1,0,0,0,1226,183,1,0,0,0,1227,1228,5,45,0,
        0,1228,1248,5,48,0,0,1229,1230,5,45,0,0,1230,1232,3,190,95,0,1231,
        1233,5,51,0,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,
        0,0,1234,1235,5,48,0,0,1235,1248,1,0,0,0,1236,1237,5,45,0,0,1237,
        1240,3,186,93,0,1238,1239,5,51,0,0,1239,1241,3,190,95,0,1240,1238,
        1,0,0,0,1240,1241,1,0,0,0,1241,1243,1,0,0,0,1242,1244,5,51,0,0,1243,
        1242,1,0,0,0,1243,1244,1,0,0,0,1244,1245,1,0,0,0,1245,1246,5,48,
        0,0,1246,1248,1,0,0,0,1247,1227,1,0,0,0,1247,1229,1,0,0,0,1247,1236,
        1,0,0,0,1248,185,1,0,0,0,1249,1254,3,188,94,0,1250,1251,5,51,0,0,
        1251,1253,3,188,94,0,1252,1250,1,0,0,0,1253,1256,1,0,0,0,1254,1252,
        1,0,0,0,1254,1255,1,0,0,0,1255,187,1,0,0,0,1256,1254,1,0,0,0,1257,
        1260,3,146,73,0,1258,1260,3,168,84,0,1259,1257,1,0,0,0,1259,1258,
        1,0,0,0,1260,1261,1,0,0,0,1261,1262,5,50,0,0,1262,1263,3,136,68,
        0,1263,189,1,0,0,0,1264,1265,5,71,0,0,1265,1266,3,162,81,0,1266,
        191,1,0,0,0,1267,1268,3,170,85,0,1268,1280,5,43,0,0,1269,1272,3,
        194,97,0,1270,1271,5,51,0,0,1271,1273,3,196,98,0,1272,1270,1,0,0,
        0,1272,1273,1,0,0,0,1273,1276,1,0,0,0,1274,1276,3,196,98,0,1275,
        1269,1,0,0,0,1275,1274,1,0,0,0,1276,1278,1,0,0,0,1277,1279,5,51,
        0,0,1278,1277,1,0,0,0,1278,1279,1,0,0,0,1279,1281,1,0,0,0,1280,1275,
        1,0,0,0,1280,1281,1,0,0,0,1281,1282,1,0,0,0,1282,1283,5,46,0,0,1283,
        193,1,0,0,0,1284,1289,3,136,68,0,1285,1286,5,51,0,0,1286,1288,3,
        136,68,0,1287,1285,1,0,0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,1289,
        1290,1,0,0,0,1290,195,1,0,0,0,1291,1289,1,0,0,0,1292,1297,3,198,
        99,0,1293,1294,5,51,0,0,1294,1296,3,198,99,0,1295,1293,1,0,0,0,1296,
        1299,1,0,0,0,1297,1295,1,0,0,0,1297,1298,1,0,0,0,1298,197,1,0,0,
        0,1299,1297,1,0,0,0,1300,1301,5,93,0,0,1301,1302,5,61,0,0,1302,1303,
        3,136,68,0,1303,199,1,0,0,0,1304,1305,3,394,197,0,1305,1307,5,93,
        0,0,1306,1308,3,202,101,0,1307,1306,1,0,0,0,1307,1308,1,0,0,0,1308,
        1309,1,0,0,0,1309,1310,5,61,0,0,1310,1311,3,212,106,0,1311,201,1,
        0,0,0,1312,1313,5,44,0,0,1313,1314,3,204,102,0,1314,1315,5,47,0,
        0,1315,203,1,0,0,0,1316,1321,3,206,103,0,1317,1318,5,51,0,0,1318,
        1320,3,206,103,0,1319,1317,1,0,0,0,1320,1323,1,0,0,0,1321,1319,1,
        0,0,0,1321,1322,1,0,0,0,1322,1325,1,0,0,0,1323,1321,1,0,0,0,1324,
        1326,5,51,0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,205,1,0,0,
        0,1327,1329,5,93,0,0,1328,1330,3,208,104,0,1329,1328,1,0,0,0,1329,
        1330,1,0,0,0,1330,1344,1,0,0,0,1331,1332,5,55,0,0,1332,1335,5,93,
        0,0,1333,1334,5,50,0,0,1334,1336,3,212,106,0,1335,1333,1,0,0,0,1335,
        1336,1,0,0,0,1336,1344,1,0,0,0,1337,1338,5,71,0,0,1338,1341,5,93,
        0,0,1339,1340,5,50,0,0,1340,1342,3,212,106,0,1341,1339,1,0,0,0,1341,
        1342,1,0,0,0,1342,1344,1,0,0,0,1343,1327,1,0,0,0,1343,1331,1,0,0,
        0,1343,1337,1,0,0,0,1344,207,1,0,0,0,1345,1346,5,50,0,0,1346,1347,
        3,212,106,0,1347,209,1,0,0,0,1348,1353,3,212,106,0,1349,1350,5,51,
        0,0,1350,1352,3,212,106,0,1351,1349,1,0,0,0,1352,1355,1,0,0,0,1353,
        1351,1,0,0,0,1353,1354,1,0,0,0,1354,1357,1,0,0,0,1355,1353,1,0,0,
        0,1356,1358,5,51,0,0,1357,1356,1,0,0,0,1357,1358,1,0,0,0,1358,211,
        1,0,0,0,1359,1365,3,228,114,0,1360,1361,5,38,0,0,1361,1362,3,228,
        114,0,1362,1363,5,8,0,0,1363,1364,3,212,106,0,1364,1366,1,0,0,0,
        1365,1360,1,0,0,0,1365,1366,1,0,0,0,1366,1369,1,0,0,0,1367,1369,
        3,290,145,0,1368,1359,1,0,0,0,1368,1367,1,0,0,0,1369,213,1,0,0,0,
        1370,1376,5,40,0,0,1371,1372,5,28,0,0,1372,1377,3,212,106,0,1373,
        1375,3,216,108,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1377,1,
        0,0,0,1376,1371,1,0,0,0,1376,1374,1,0,0,0,1377,215,1,0,0,0,1378,
        1383,3,218,109,0,1379,1380,5,51,0,0,1380,1382,3,218,109,0,1381,1379,
        1,0,0,0,1382,1385,1,0,0,0,1383,1381,1,0,0,0,1383,1384,1,0,0,0,1384,
        1387,1,0,0,0,1385,1383,1,0,0,0,1386,1388,5,51,0,0,1387,1386,1,0,
        0,0,1387,1388,1,0,0,0,1388,217,1,0,0,0,1389,1390,5,55,0,0,1390,1393,
        3,258,129,0,1391,1393,3,212,106,0,1392,1389,1,0,0,0,1392,1391,1,
        0,0,0,1393,219,1,0,0,0,1394,1399,3,222,111,0,1395,1396,5,51,0,0,
        1396,1398,3,222,111,0,1397,1395,1,0,0,0,1398,1401,1,0,0,0,1399,1397,
        1,0,0,0,1399,1400,1,0,0,0,1400,1403,1,0,0,0,1401,1399,1,0,0,0,1402,
        1404,5,51,0,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,221,1,0,0,
        0,1405,1406,5,55,0,0,1406,1409,3,258,129,0,1407,1409,3,226,113,0,
        1408,1405,1,0,0,0,1408,1407,1,0,0,0,1409,223,1,0,0,0,1410,1411,5,
        93,0,0,1411,1412,5,89,0,0,1412,1413,3,212,106,0,1413,225,1,0,0,0,
        1414,1417,3,224,112,0,1415,1417,3,212,106,0,1416,1414,1,0,0,0,1416,
        1415,1,0,0,0,1417,227,1,0,0,0,1418,1423,3,230,115,0,1419,1420,5,
        39,0,0,1420,1422,3,230,115,0,1421,1419,1,0,0,0,1422,1425,1,0,0,0,
        1423,1421,1,0,0,0,1423,1424,1,0,0,0,1424,229,1,0,0,0,1425,1423,1,
        0,0,0,1426,1431,3,232,116,0,1427,1428,5,21,0,0,1428,1430,3,232,116,
        0,1429,1427,1,0,0,0,1430,1433,1,0,0,0,1431,1429,1,0,0,0,1431,1432,
        1,0,0,0,1432,231,1,0,0,0,1433,1431,1,0,0,0,1434,1435,5,34,0,0,1435,
        1438,3,232,116,0,1436,1438,3,234,117,0,1437,1434,1,0,0,0,1437,1436,
        1,0,0,0,1438,233,1,0,0,0,1439,1443,3,258,129,0,1440,1442,3,236,118,
        0,1441,1440,1,0,0,0,1442,1445,1,0,0,0,1443,1441,1,0,0,0,1443,1444,
        1,0,0,0,1444,235,1,0,0,0,1445,1443,1,0,0,0,1446,1457,3,238,119,0,
        1447,1457,3,240,120,0,1448,1457,3,242,121,0,1449,1457,3,244,122,
        0,1450,1457,3,246,123,0,1451,1457,3,248,124,0,1452,1457,3,250,125,
        0,1453,1457,3,252,126,0,1454,1457,3,254,127,0,1455,1457,3,256,128,
        0,1456,1446,1,0,0,0,1456,1447,1,0,0,0,1456,1448,1,0,0,0,1456,1449,
        1,0,0,0,1456,1450,1,0,0,0,1456,1451,1,0,0,0,1456,1452,1,0,0,0,1456,
        1453,1,0,0,0,1456,1454,1,0,0,0,1456,1455,1,0,0,0,1457,237,1,0,0,
        0,1458,1459,5,63,0,0,1459,1460,3,258,129,0,1460,239,1,0,0,0,1461,
        1462,5,64,0,0,1462,1463,3,258,129,0,1463,241,1,0,0,0,1464,1465,5,
        65,0,0,1465,1466,3,258,129,0,1466,243,1,0,0,0,1467,1468,5,59,0,0,
        1468,1469,3,258,129,0,1469,245,1,0,0,0,1470,1471,5,66,0,0,1471,1472,
        3,258,129,0,1472,247,1,0,0,0,1473,1474,5,60,0,0,1474,1475,3,258,
        129,0,1475,249,1,0,0,0,1476,1477,5,34,0,0,1477,1478,5,14,0,0,1478,
        1479,3,258,129,0,1479,251,1,0,0,0,1480,1481,5,14,0,0,1481,1482,3,
        258,129,0,1482,253,1,0,0,0,1483,1484,5,19,0,0,1484,1485,5,34,0,0,
        1485,1486,3,258,129,0,1486,255,1,0,0,0,1487,1488,5,19,0,0,1488,1489,
        3,258,129,0,1489,257,1,0,0,0,1490,1491,6,129,-1,0,1491,1492,3,260,
        130,0,1492,1498,1,0,0,0,1493,1494,10,2,0,0,1494,1495,5,57,0,0,1495,
        1497,3,260,130,0,1496,1493,1,0,0,0,1497,1500,1,0,0,0,1498,1496,1,
        0,0,0,1498,1499,1,0,0,0,1499,259,1,0,0,0,1500,1498,1,0,0,0,1501,
        1502,6,130,-1,0,1502,1503,3,262,131,0,1503,1509,1,0,0,0,1504,1505,
        10,2,0,0,1505,1506,5,68,0,0,1506,1508,3,262,131,0,1507,1504,1,0,
        0,0,1508,1511,1,0,0,0,1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,261,
        1,0,0,0,1511,1509,1,0,0,0,1512,1513,6,131,-1,0,1513,1514,3,264,132,
        0,1514,1520,1,0,0,0,1515,1516,10,2,0,0,1516,1517,5,58,0,0,1517,1519,
        3,264,132,0,1518,1515,1,0,0,0,1519,1522,1,0,0,0,1520,1518,1,0,0,
        0,1520,1521,1,0,0,0,1521,263,1,0,0,0,1522,1520,1,0,0,0,1523,1524,
        6,132,-1,0,1524,1525,3,266,133,0,1525,1531,1,0,0,0,1526,1527,10,
        2,0,0,1527,1528,7,4,0,0,1528,1530,3,266,133,0,1529,1526,1,0,0,0,
        1530,1533,1,0,0,0,1531,1529,1,0,0,0,1531,1532,1,0,0,0,1532,265,1,
        0,0,0,1533,1531,1,0,0,0,1534,1535,6,133,-1,0,1535,1536,3,268,134,
        0,1536,1542,1,0,0,0,1537,1538,10,2,0,0,1538,1539,7,3,0,0,1539,1541,
        3,268,134,0,1540,1537,1,0,0,0,1541,1544,1,0,0,0,1542,1540,1,0,0,
        0,1542,1543,1,0,0,0,1543,267,1,0,0,0,1544,1542,1,0,0,0,1545,1546,
        6,134,-1,0,1546,1547,3,270,135,0,1547,1553,1,0,0,0,1548,1549,10,
        2,0,0,1549,1550,7,5,0,0,1550,1552,3,270,135,0,1551,1548,1,0,0,0,
        1552,1555,1,0,0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,269,1,
        0,0,0,1555,1553,1,0,0,0,1556,1557,6,135,-1,0,1557,1558,3,272,136,
        0,1558,1564,1,0,0,0,1559,1560,10,2,0,0,1560,1561,7,6,0,0,1561,1563,
        3,272,136,0,1562,1559,1,0,0,0,1563,1566,1,0,0,0,1564,1562,1,0,0,
        0,1564,1565,1,0,0,0,1565,271,1,0,0,0,1566,1564,1,0,0,0,1567,1568,
        5,53,0,0,1568,1575,3,272,136,0,1569,1570,5,54,0,0,1570,1575,3,272,
        136,0,1571,1572,5,67,0,0,1572,1575,3,272,136,0,1573,1575,3,274,137,
        0,1574,1567,1,0,0,0,1574,1569,1,0,0,0,1574,1571,1,0,0,0,1574,1573,
        1,0,0,0,1575,273,1,0,0,0,1576,1579,3,276,138,0,1577,1578,5,71,0,
        0,1578,1580,3,272,136,0,1579,1577,1,0,0,0,1579,1580,1,0,0,0,1580,
        275,1,0,0,0,1581,1582,5,7,0,0,1582,1585,3,278,139,0,1583,1585,3,
        278,139,0,1584,1581,1,0,0,0,1584,1583,1,0,0,0,1585,277,1,0,0,0,1586,
        1587,6,139,-1,0,1587,1588,3,284,142,0,1588,1606,1,0,0,0,1589,1602,
        10,2,0,0,1590,1591,5,49,0,0,1591,1603,5,93,0,0,1592,1603,3,350,175,
        0,1593,1595,5,43,0,0,1594,1596,3,354,177,0,1595,1594,1,0,0,0,1595,
        1596,1,0,0,0,1596,1597,1,0,0,0,1597,1603,5,46,0,0,1598,1599,5,44,
        0,0,1599,1600,3,280,140,0,1600,1601,5,47,0,0,1601,1603,1,0,0,0,1602,
        1590,1,0,0,0,1602,1592,1,0,0,0,1602,1593,1,0,0,0,1602,1598,1,0,0,
        0,1603,1605,1,0,0,0,1604,1589,1,0,0,0,1605,1608,1,0,0,0,1606,1604,
        1,0,0,0,1606,1607,1,0,0,0,1607,279,1,0,0,0,1608,1606,1,0,0,0,1609,
        1628,3,282,141,0,1610,1613,3,282,141,0,1611,1613,3,360,180,0,1612,
        1610,1,0,0,0,1612,1611,1,0,0,0,1613,1621,1,0,0,0,1614,1617,5,51,
        0,0,1615,1618,3,282,141,0,1616,1618,3,360,180,0,1617,1615,1,0,0,
        0,1617,1616,1,0,0,0,1618,1620,1,0,0,0,1619,1614,1,0,0,0,1620,1623,
        1,0,0,0,1621,1619,1,0,0,0,1621,1622,1,0,0,0,1622,1625,1,0,0,0,1623,
        1621,1,0,0,0,1624,1626,5,51,0,0,1625,1624,1,0,0,0,1625,1626,1,0,
        0,0,1626,1628,1,0,0,0,1627,1609,1,0,0,0,1627,1612,1,0,0,0,1628,281,
        1,0,0,0,1629,1631,3,212,106,0,1630,1629,1,0,0,0,1630,1631,1,0,0,
        0,1631,1632,1,0,0,0,1632,1634,5,50,0,0,1633,1635,3,212,106,0,1634,
        1633,1,0,0,0,1634,1635,1,0,0,0,1635,1640,1,0,0,0,1636,1638,5,50,
        0,0,1637,1639,3,212,106,0,1638,1637,1,0,0,0,1638,1639,1,0,0,0,1639,
        1641,1,0,0,0,1640,1636,1,0,0,0,1640,1641,1,0,0,0,1641,1644,1,0,0,
        0,1642,1644,3,226,113,0,1643,1630,1,0,0,0,1643,1642,1,0,0,0,1644,
        283,1,0,0,0,1645,1669,5,93,0,0,1646,1669,5,16,0,0,1647,1669,5,6,
        0,0,1648,1669,5,11,0,0,1649,1669,3,326,163,0,1650,1669,3,286,143,
        0,1651,1669,5,94,0,0,1652,1656,3,330,165,0,1653,1656,3,288,144,0,
        1654,1656,3,350,175,0,1655,1652,1,0,0,0,1655,1653,1,0,0,0,1655,1654,
        1,0,0,0,1656,1669,1,0,0,0,1657,1660,3,328,164,0,1658,1660,3,346,
        173,0,1659,1657,1,0,0,0,1659,1658,1,0,0,0,1660,1669,1,0,0,0,1661,
        1666,3,334,167,0,1662,1666,3,332,166,0,1663,1666,3,352,176,0,1664,
        1666,3,348,174,0,1665,1661,1,0,0,0,1665,1662,1,0,0,0,1665,1663,1,
        0,0,0,1665,1664,1,0,0,0,1666,1669,1,0,0,0,1667,1669,5,88,0,0,1668,
        1645,1,0,0,0,1668,1646,1,0,0,0,1668,1647,1,0,0,0,1668,1648,1,0,0,
        0,1668,1649,1,0,0,0,1668,1650,1,0,0,0,1668,1651,1,0,0,0,1668,1655,
        1,0,0,0,1668,1659,1,0,0,0,1668,1665,1,0,0,0,1668,1667,1,0,0,0,1669,
        285,1,0,0,0,1670,1671,5,94,0,0,1671,1672,7,2,0,0,1672,287,1,0,0,
        0,1673,1676,5,43,0,0,1674,1677,3,214,107,0,1675,1677,3,226,113,0,
        1676,1674,1,0,0,0,1676,1675,1,0,0,0,1677,1678,1,0,0,0,1678,1679,
        5,46,0,0,1679,289,1,0,0,0,1680,1682,5,24,0,0,1681,1683,3,292,146,
        0,1682,1681,1,0,0,0,1682,1683,1,0,0,0,1683,1684,1,0,0,0,1684,1685,
        5,50,0,0,1685,1686,3,212,106,0,1686,291,1,0,0,0,1687,1688,3,294,
        147,0,1688,293,1,0,0,0,1689,1693,3,296,148,0,1690,1692,3,304,152,
        0,1691,1690,1,0,0,0,1692,1695,1,0,0,0,1693,1691,1,0,0,0,1693,1694,
        1,0,0,0,1694,1699,1,0,0,0,1695,1693,1,0,0,0,1696,1698,3,306,153,
        0,1697,1696,1,0,0,0,1698,1701,1,0,0,0,1699,1697,1,0,0,0,1699,1700,
        1,0,0,0,1700,1703,1,0,0,0,1701,1699,1,0,0,0,1702,1704,3,300,150,
        0,1703,1702,1,0,0,0,1703,1704,1,0,0,0,1704,1739,1,0,0,0,1705,1709,
        3,298,149,0,1706,1708,3,306,153,0,1707,1706,1,0,0,0,1708,1711,1,
        0,0,0,1709,1707,1,0,0,0,1709,1710,1,0,0,0,1710,1713,1,0,0,0,1711,
        1709,1,0,0,0,1712,1714,3,300,150,0,1713,1712,1,0,0,0,1713,1714,1,
        0,0,0,1714,1739,1,0,0,0,1715,1717,3,304,152,0,1716,1715,1,0,0,0,
        1717,1718,1,0,0,0,1718,1716,1,0,0,0,1718,1719,1,0,0,0,1719,1723,
        1,0,0,0,1720,1722,3,306,153,0,1721,1720,1,0,0,0,1722,1725,1,0,0,
        0,1723,1721,1,0,0,0,1723,1724,1,0,0,0,1724,1727,1,0,0,0,1725,1723,
        1,0,0,0,1726,1728,3,300,150,0,1727,1726,1,0,0,0,1727,1728,1,0,0,
        0,1728,1739,1,0,0,0,1729,1731,3,306,153,0,1730,1729,1,0,0,0,1731,
        1732,1,0,0,0,1732,1730,1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,
        0,1734,1736,3,300,150,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,
        1739,1,0,0,0,1737,1739,3,300,150,0,1738,1689,1,0,0,0,1738,1705,1,
        0,0,0,1738,1716,1,0,0,0,1738,1730,1,0,0,0,1738,1737,1,0,0,0,1739,
        295,1,0,0,0,1740,1742,3,304,152,0,1741,1740,1,0,0,0,1742,1743,1,
        0,0,0,1743,1741,1,0,0,0,1743,1744,1,0,0,0,1744,1745,1,0,0,0,1745,
        1747,5,56,0,0,1746,1748,5,51,0,0,1747,1746,1,0,0,0,1747,1748,1,0,
        0,0,1748,297,1,0,0,0,1749,1751,3,304,152,0,1750,1749,1,0,0,0,1751,
        1754,1,0,0,0,1752,1750,1,0,0,0,1752,1753,1,0,0,0,1753,1756,1,0,0,
        0,1754,1752,1,0,0,0,1755,1757,3,306,153,0,1756,1755,1,0,0,0,1757,
        1758,1,0,0,0,1758,1756,1,0,0,0,1758,1759,1,0,0,0,1759,1760,1,0,0,
        0,1760,1762,5,56,0,0,1761,1763,5,51,0,0,1762,1761,1,0,0,0,1762,1763,
        1,0,0,0,1763,299,1,0,0,0,1764,1765,5,55,0,0,1765,1769,3,304,152,
        0,1766,1768,3,308,154,0,1767,1766,1,0,0,0,1768,1771,1,0,0,0,1769,
        1767,1,0,0,0,1769,1770,1,0,0,0,1770,1773,1,0,0,0,1771,1769,1,0,0,
        0,1772,1774,3,302,151,0,1773,1772,1,0,0,0,1773,1774,1,0,0,0,1774,
        1787,1,0,0,0,1775,1776,5,55,0,0,1776,1778,5,51,0,0,1777,1779,3,308,
        154,0,1778,1777,1,0,0,0,1779,1780,1,0,0,0,1780,1778,1,0,0,0,1780,
        1781,1,0,0,0,1781,1783,1,0,0,0,1782,1784,3,302,151,0,1783,1782,1,
        0,0,0,1783,1784,1,0,0,0,1784,1787,1,0,0,0,1785,1787,3,302,151,0,
        1786,1764,1,0,0,0,1786,1775,1,0,0,0,1786,1785,1,0,0,0,1787,301,1,
        0,0,0,1788,1789,5,71,0,0,1789,1790,3,304,152,0,1790,303,1,0,0,0,
        1791,1793,3,310,155,0,1792,1794,5,51,0,0,1793,1792,1,0,0,0,1793,
        1794,1,0,0,0,1794,305,1,0,0,0,1795,1796,3,310,155,0,1796,1798,3,
        102,51,0,1797,1799,5,51,0,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,
        1799,307,1,0,0,0,1800,1802,3,310,155,0,1801,1803,3,102,51,0,1802,
        1801,1,0,0,0,1802,1803,1,0,0,0,1803,1805,1,0,0,0,1804,1806,5,51,
        0,0,1805,1804,1,0,0,0,1805,1806,1,0,0,0,1806,309,1,0,0,0,1807,1808,
        5,93,0,0,1808,311,1,0,0,0,1809,1812,3,314,157,0,1810,1812,5,4,0,
        0,1811,1809,1,0,0,0,1811,1810,1,0,0,0,1812,313,1,0,0,0,1813,1816,
        5,45,0,0,1814,1817,3,214,107,0,1815,1817,3,216,108,0,1816,1814,1,
        0,0,0,1816,1815,1,0,0,0,1817,1819,1,0,0,0,1818,1820,5,61,0,0,1819,
        1818,1,0,0,0,1819,1820,1,0,0,0,1820,1822,1,0,0,0,1821,1823,3,316,
        158,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,1823,1825,1,0,0,0,1824,
        1826,3,318,159,0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,1826,1827,1,
        0,0,0,1827,1828,5,48,0,0,1828,315,1,0,0,0,1829,1830,5,90,0,0,1830,
        1831,5,93,0,0,1831,317,1,0,0,0,1832,1836,5,50,0,0,1833,1835,3,320,
        160,0,1834,1833,1,0,0,0,1835,1838,1,0,0,0,1836,1834,1,0,0,0,1836,
        1837,1,0,0,0,1837,319,1,0,0,0,1838,1836,1,0,0,0,1839,1842,5,4,0,
        0,1840,1842,3,314,157,0,1841,1839,1,0,0,0,1841,1840,1,0,0,0,1842,
        321,1,0,0,0,1843,1847,5,3,0,0,1844,1846,3,312,156,0,1845,1844,1,
        0,0,0,1846,1849,1,0,0,0,1847,1845,1,0,0,0,1847,1848,1,0,0,0,1848,
        1850,1,0,0,0,1849,1847,1,0,0,0,1850,1851,5,5,0,0,1851,323,1,0,0,
        0,1852,1853,5,95,0,0,1853,325,1,0,0,0,1854,1857,3,322,161,0,1855,
        1857,3,324,162,0,1856,1854,1,0,0,0,1856,1855,1,0,0,0,1857,1858,1,
        0,0,0,1858,1856,1,0,0,0,1858,1859,1,0,0,0,1859,327,1,0,0,0,1860,
        1862,5,44,0,0,1861,1863,3,220,110,0,1862,1861,1,0,0,0,1862,1863,
        1,0,0,0,1863,1864,1,0,0,0,1864,1865,5,47,0,0,1865,329,1,0,0,0,1866,
        1872,5,43,0,0,1867,1868,3,222,111,0,1868,1870,5,51,0,0,1869,1871,
        3,220,110,0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,1873,1,0,0,
        0,1872,1867,1,0,0,0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,1875,
        5,46,0,0,1875,331,1,0,0,0,1876,1877,5,45,0,0,1877,1878,3,220,110,
        0,1878,1879,5,48,0,0,1879,333,1,0,0,0,1880,1882,5,45,0,0,1881,1883,
        3,336,168,0,1882,1881,1,0,0,0,1882,1883,1,0,0,0,1883,1884,1,0,0,
        0,1884,1885,5,48,0,0,1885,335,1,0,0,0,1886,1891,3,338,169,0,1887,
        1888,5,51,0,0,1888,1890,3,338,169,0,1889,1887,1,0,0,0,1890,1893,
        1,0,0,0,1891,1889,1,0,0,0,1891,1892,1,0,0,0,1892,1895,1,0,0,0,1893,
        1891,1,0,0,0,1894,1896,5,51,0,0,1895,1894,1,0,0,0,1895,1896,1,0,
        0,0,1896,337,1,0,0,0,1897,1898,5,71,0,0,1898,1901,3,258,129,0,1899,
        1901,3,340,170,0,1900,1897,1,0,0,0,1900,1899,1,0,0,0,1901,339,1,
        0,0,0,1902,1903,3,212,106,0,1903,1904,5,50,0,0,1904,1905,3,212,106,
        0,1905,341,1,0,0,0,1906,1908,3,344,172,0,1907,1906,1,0,0,0,1908,
        1909,1,0,0,0,1909,1907,1,0,0,0,1909,1910,1,0,0,0,1910,343,1,0,0,
        0,1911,1913,5,36,0,0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,1914,
        1,0,0,0,1914,1915,5,23,0,0,1915,1916,3,366,183,0,1916,1917,5,14,
        0,0,1917,1922,3,228,114,0,1918,1919,5,38,0,0,1919,1921,3,228,114,
        0,1920,1918,1,0,0,0,1921,1924,1,0,0,0,1922,1920,1,0,0,0,1922,1923,
        1,0,0,0,1923,345,1,0,0,0,1924,1922,1,0,0,0,1925,1926,5,44,0,0,1926,
        1927,3,226,113,0,1927,1928,3,342,171,0,1928,1929,5,47,0,0,1929,347,
        1,0,0,0,1930,1931,5,45,0,0,1931,1932,3,226,113,0,1932,1933,3,342,
        171,0,1933,1934,5,48,0,0,1934,349,1,0,0,0,1935,1938,5,43,0,0,1936,
        1939,3,224,112,0,1937,1939,3,212,106,0,1938,1936,1,0,0,0,1938,1937,
        1,0,0,0,1939,1940,1,0,0,0,1940,1941,3,342,171,0,1941,1942,5,46,0,
        0,1942,351,1,0,0,0,1943,1944,5,45,0,0,1944,1945,3,340,170,0,1945,
        1946,3,342,171,0,1946,1947,5,48,0,0,1947,353,1,0,0,0,1948,1950,3,
        356,178,0,1949,1951,5,51,0,0,1950,1949,1,0,0,0,1950,1951,1,0,0,0,
        1951,355,1,0,0,0,1952,1958,3,360,180,0,1953,1956,3,224,112,0,1954,
        1956,3,212,106,0,1955,1953,1,0,0,0,1955,1954,1,0,0,0,1956,1958,1,
        0,0,0,1957,1952,1,0,0,0,1957,1955,1,0,0,0,1958,1969,1,0,0,0,1959,
        1965,5,51,0,0,1960,1966,3,360,180,0,1961,1964,3,224,112,0,1962,1964,
        3,212,106,0,1963,1961,1,0,0,0,1963,1962,1,0,0,0,1964,1966,1,0,0,
        0,1965,1960,1,0,0,0,1965,1963,1,0,0,0,1966,1968,1,0,0,0,1967,1959,
        1,0,0,0,1968,1971,1,0,0,0,1969,1967,1,0,0,0,1969,1970,1,0,0,0,1970,
        1974,1,0,0,0,1971,1969,1,0,0,0,1972,1973,5,51,0,0,1973,1975,3,358,
        179,0,1974,1972,1,0,0,0,1974,1975,1,0,0,0,1975,1978,1,0,0,0,1976,
        1978,3,358,179,0,1977,1957,1,0,0,0,1977,1976,1,0,0,0,1978,357,1,
        0,0,0,1979,1984,3,362,181,0,1980,1981,5,51,0,0,1981,1983,3,362,181,
        0,1982,1980,1,0,0,0,1983,1986,1,0,0,0,1984,1982,1,0,0,0,1984,1985,
        1,0,0,0,1985,1996,1,0,0,0,1986,1984,1,0,0,0,1987,1988,5,51,0,0,1988,
        1993,3,364,182,0,1989,1990,5,51,0,0,1990,1992,3,364,182,0,1991,1989,
        1,0,0,0,1992,1995,1,0,0,0,1993,1991,1,0,0,0,1993,1994,1,0,0,0,1994,
        1997,1,0,0,0,1995,1993,1,0,0,0,1996,1987,1,0,0,0,1996,1997,1,0,0,
        0,1997,2007,1,0,0,0,1998,2003,3,364,182,0,1999,2000,5,51,0,0,2000,
        2002,3,364,182,0,2001,1999,1,0,0,0,2002,2005,1,0,0,0,2003,2001,1,
        0,0,0,2003,2004,1,0,0,0,2004,2007,1,0,0,0,2005,2003,1,0,0,0,2006,
        1979,1,0,0,0,2006,1998,1,0,0,0,2007,359,1,0,0,0,2008,2009,5,55,0,
        0,2009,2010,3,212,106,0,2010,361,1,0,0,0,2011,2012,5,93,0,0,2012,
        2013,5,61,0,0,2013,2016,3,212,106,0,2014,2016,3,360,180,0,2015,2011,
        1,0,0,0,2015,2014,1,0,0,0,2016,363,1,0,0,0,2017,2018,5,93,0,0,2018,
        2019,5,61,0,0,2019,2023,3,212,106,0,2020,2021,5,71,0,0,2021,2023,
        3,212,106,0,2022,2017,1,0,0,0,2022,2020,1,0,0,0,2023,365,1,0,0,0,
        2024,2029,3,372,186,0,2025,2026,5,51,0,0,2026,2028,3,372,186,0,2027,
        2025,1,0,0,0,2028,2031,1,0,0,0,2029,2027,1,0,0,0,2029,2030,1,0,0,
        0,2030,2033,1,0,0,0,2031,2029,1,0,0,0,2032,2034,5,51,0,0,2033,2032,
        1,0,0,0,2033,2034,1,0,0,0,2034,367,1,0,0,0,2035,2038,3,372,186,0,
        2036,2037,5,51,0,0,2037,2039,3,372,186,0,2038,2036,1,0,0,0,2039,
        2040,1,0,0,0,2040,2038,1,0,0,0,2040,2041,1,0,0,0,2041,2043,1,0,0,
        0,2042,2044,5,51,0,0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,369,
        1,0,0,0,2045,2056,3,372,186,0,2046,2057,5,51,0,0,2047,2048,5,51,
        0,0,2048,2050,3,372,186,0,2049,2047,1,0,0,0,2050,2051,1,0,0,0,2051,
        2049,1,0,0,0,2051,2052,1,0,0,0,2052,2054,1,0,0,0,2053,2055,5,51,
        0,0,2054,2053,1,0,0,0,2054,2055,1,0,0,0,2055,2057,1,0,0,0,2056,2046,
        1,0,0,0,2056,2049,1,0,0,0,2057,371,1,0,0,0,2058,2059,5,55,0,0,2059,
        2062,3,372,186,0,2060,2062,3,374,187,0,2061,2058,1,0,0,0,2061,2060,
        1,0,0,0,2062,373,1,0,0,0,2063,2070,3,382,191,0,2064,2065,5,49,0,
        0,2065,2071,5,93,0,0,2066,2067,5,44,0,0,2067,2068,3,280,140,0,2068,
        2069,5,47,0,0,2069,2071,1,0,0,0,2070,2064,1,0,0,0,2070,2066,1,0,
        0,0,2071,2074,1,0,0,0,2072,2074,3,376,188,0,2073,2063,1,0,0,0,2073,
        2072,1,0,0,0,2074,375,1,0,0,0,2075,2091,5,93,0,0,2076,2077,5,43,
        0,0,2077,2078,3,374,187,0,2078,2079,5,46,0,0,2079,2091,1,0,0,0,2080,
        2082,5,43,0,0,2081,2083,3,370,185,0,2082,2081,1,0,0,0,2082,2083,
        1,0,0,0,2083,2084,1,0,0,0,2084,2091,5,46,0,0,2085,2087,5,44,0,0,
        2086,2088,3,368,184,0,2087,2086,1,0,0,0,2087,2088,1,0,0,0,2088,2089,
        1,0,0,0,2089,2091,5,47,0,0,2090,2075,1,0,0,0,2090,2076,1,0,0,0,2090,
        2080,1,0,0,0,2090,2085,1,0,0,0,2091,377,1,0,0,0,2092,2099,3,380,
        190,0,2093,2099,5,93,0,0,2094,2095,5,43,0,0,2095,2096,3,378,189,
        0,2096,2097,5,46,0,0,2097,2099,1,0,0,0,2098,2092,1,0,0,0,2098,2093,
        1,0,0,0,2098,2094,1,0,0,0,2099,379,1,0,0,0,2100,2107,3,382,191,0,
        2101,2102,5,49,0,0,2102,2108,5,93,0,0,2103,2104,5,44,0,0,2104,2105,
        3,280,140,0,2105,2106,5,47,0,0,2106,2108,1,0,0,0,2107,2101,1,0,0,
        0,2107,2103,1,0,0,0,2108,381,1,0,0,0,2109,2110,6,191,-1,0,2110,2111,
        3,284,142,0,2111,2129,1,0,0,0,2112,2125,10,2,0,0,2113,2114,5,49,
        0,0,2114,2126,5,93,0,0,2115,2116,5,44,0,0,2116,2117,3,280,140,0,
        2117,2118,5,47,0,0,2118,2126,1,0,0,0,2119,2126,3,350,175,0,2120,
        2122,5,43,0,0,2121,2123,3,354,177,0,2122,2121,1,0,0,0,2122,2123,
        1,0,0,0,2123,2124,1,0,0,0,2124,2126,5,46,0,0,2125,2113,1,0,0,0,2125,
        2115,1,0,0,0,2125,2119,1,0,0,0,2125,2120,1,0,0,0,2126,2128,1,0,0,
        0,2127,2112,1,0,0,0,2128,2131,1,0,0,0,2129,2127,1,0,0,0,2129,2130,
        1,0,0,0,2130,383,1,0,0,0,2131,2129,1,0,0,0,2132,2137,3,386,193,0,
        2133,2134,5,51,0,0,2134,2136,3,386,193,0,2135,2133,1,0,0,0,2136,
        2139,1,0,0,0,2137,2135,1,0,0,0,2137,2138,1,0,0,0,2138,2141,1,0,0,
        0,2139,2137,1,0,0,0,2140,2142,5,51,0,0,2141,2140,1,0,0,0,2141,2142,
        1,0,0,0,2142,385,1,0,0,0,2143,2150,3,382,191,0,2144,2145,5,49,0,
        0,2145,2151,5,93,0,0,2146,2147,5,44,0,0,2147,2148,3,280,140,0,2148,
        2149,5,47,0,0,2149,2151,1,0,0,0,2150,2144,1,0,0,0,2150,2146,1,0,
        0,0,2151,2154,1,0,0,0,2152,2154,3,388,194,0,2153,2143,1,0,0,0,2153,
        2152,1,0,0,0,2154,387,1,0,0,0,2155,2171,5,93,0,0,2156,2157,5,43,
        0,0,2157,2158,3,386,193,0,2158,2159,5,46,0,0,2159,2171,1,0,0,0,2160,
        2162,5,43,0,0,2161,2163,3,384,192,0,2162,2161,1,0,0,0,2162,2163,
        1,0,0,0,2163,2164,1,0,0,0,2164,2171,5,46,0,0,2165,2167,5,44,0,0,
        2166,2168,3,384,192,0,2167,2166,1,0,0,0,2167,2168,1,0,0,0,2168,2169,
        1,0,0,0,2169,2171,5,47,0,0,2170,2155,1,0,0,0,2170,2156,1,0,0,0,2170,
        2160,1,0,0,0,2170,2165,1,0,0,0,2171,389,1,0,0,0,2172,2177,3,212,
        106,0,2173,2174,5,51,0,0,2174,2176,3,212,106,0,2175,2173,1,0,0,0,
        2176,2179,1,0,0,0,2177,2175,1,0,0,0,2177,2178,1,0,0,0,2178,2192,
        1,0,0,0,2179,2177,1,0,0,0,2180,2190,5,51,0,0,2181,2182,5,55,0,0,
        2182,2186,3,212,106,0,2183,2184,5,51,0,0,2184,2185,5,71,0,0,2185,
        2187,3,212,106,0,2186,2183,1,0,0,0,2186,2187,1,0,0,0,2187,2191,1,
        0,0,0,2188,2189,5,71,0,0,2189,2191,3,212,106,0,2190,2181,1,0,0,0,
        2190,2188,1,0,0,0,2191,2193,1,0,0,0,2192,2180,1,0,0,0,2192,2193,
        1,0,0,0,2193,2204,1,0,0,0,2194,2195,5,55,0,0,2195,2199,3,212,106,
        0,2196,2197,5,51,0,0,2197,2198,5,71,0,0,2198,2200,3,212,106,0,2199,
        2196,1,0,0,0,2199,2200,1,0,0,0,2200,2204,1,0,0,0,2201,2202,5,71,
        0,0,2202,2204,3,212,106,0,2203,2172,1,0,0,0,2203,2194,1,0,0,0,2203,
        2201,1,0,0,0,2204,391,1,0,0,0,2205,2206,5,97,0,0,2206,2209,5,96,
        0,0,2207,2209,5,96,0,0,2208,2205,1,0,0,0,2208,2207,1,0,0,0,2209,
        393,1,0,0,0,2210,2211,4,197,10,0,2211,2212,5,93,0,0,2212,395,1,0,
        0,0,2213,2214,4,198,11,0,2214,2215,5,93,0,0,2215,397,1,0,0,0,2216,
        2217,4,199,12,0,2217,2218,5,93,0,0,2218,399,1,0,0,0,2219,2220,4,
        200,13,0,2220,2221,5,93,0,0,2221,401,1,0,0,0,2222,2223,4,201,14,
        0,2223,2224,5,93,0,0,2224,403,1,0,0,0,294,405,415,422,430,440,444,
        452,459,463,482,492,499,506,512,519,523,526,532,534,538,544,550,
        552,560,569,581,585,592,601,612,616,621,627,634,640,647,653,663,
        672,680,686,691,695,698,707,712,716,721,725,732,736,741,745,748,
        756,762,766,772,776,781,786,790,795,798,801,806,810,815,821,825,
        832,836,843,847,854,857,860,867,870,874,877,882,885,889,892,895,
        899,919,921,929,931,942,945,953,957,960,969,973,983,988,990,997,
        1010,1013,1016,1024,1027,1030,1032,1038,1040,1050,1067,1074,1077,
        1082,1092,1096,1107,1118,1127,1136,1139,1149,1154,1175,1182,1191,
        1196,1199,1204,1211,1215,1219,1225,1232,1240,1243,1247,1254,1259,
        1272,1275,1278,1280,1289,1297,1307,1321,1325,1329,1335,1341,1343,
        1353,1357,1365,1368,1374,1376,1383,1387,1392,1399,1403,1408,1416,
        1423,1431,1437,1443,1456,1498,1509,1520,1531,1542,1553,1564,1574,
        1579,1584,1595,1602,1606,1612,1617,1621,1625,1627,1630,1634,1638,
        1640,1643,1655,1659,1665,1668,1676,1682,1693,1699,1703,1709,1713,
        1718,1723,1727,1732,1735,1738,1743,1747,1752,1758,1762,1769,1773,
        1780,1783,1786,1793,1798,1802,1805,1811,1816,1819,1822,1825,1836,
        1841,1847,1856,1858,1862,1870,1872,1882,1891,1895,1900,1909,1912,
        1922,1938,1950,1955,1957,1963,1965,1969,1974,1977,1984,1993,1996,
        2003,2006,2015,2022,2029,2033,2040,2043,2051,2054,2056,2061,2070,
        2073,2082,2087,2090,2098,2107,2122,2125,2129,2137,2141,2150,2153,
        2162,2167,2170,2177,2186,2190,2192,2199,2203,2208
    ]

class PythonParser ( PythonParserBase ):

    grammarFileName = "PythonParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'False'", "'await'", "'else'", 
                     "'import'", "'pass'", "'None'", "'break'", "'except'", 
                     "'in'", "'raise'", "'True'", "'class'", "'finally'", 
                     "'is'", "'return'", "'and'", "'continue'", "'for'", 
                     "'lambda'", "'try'", "'as'", "'def'", "'from'", "'nonlocal'", 
                     "'while'", "'assert'", "'del'", "'global'", "'not'", 
                     "'with'", "'async'", "'elif'", "'if'", "'or'", "'yield'", 
                     "'within'", "'to'", "'('", "'['", "<INVALID>", "')'", 
                     "']'", "<INVALID>", "'.'", "':'", "','", "';'", "'+'", 
                     "'-'", "'*'", "'/'", "'|'", "'&'", "'<'", "'>'", "'='", 
                     "'%'", "'=='", "'!='", "'<='", "'>='", "'~'", "'^'", 
                     "'<<'", "'>>'", "'**'", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", 
                     "'//'", "'//='", "'@'", "'@='", "'->'", "'...'", "':='", 
                     "'!'", "'+/-'", "'\\u00B1'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "FSTRING_START", 
                      "FSTRING_MIDDLE", "FSTRING_END", "FALSE", "AWAIT", 
                      "ELSE", "IMPORT", "PASS", "NONE", "BREAK", "EXCEPT", 
                      "IN", "RAISE", "TRUE", "CLASS", "FINALLY", "IS", "RETURN", 
                      "AND", "CONTINUE", "FOR", "LAMBDA", "TRY", "AS", "DEF", 
                      "FROM", "NONLOCAL", "WHILE", "ASSERT", "DEL", "GLOBAL", 
                      "NOT", "WITH", "ASYNC", "ELIF", "IF", "OR", "YIELD", 
                      "WITHIN", "TO", "LPAR", "LSQB", "LBRACE", "RPAR", 
                      "RSQB", "RBRACE", "DOT", "COLON", "COMMA", "SEMI", 
                      "PLUS", "MINUS", "STAR", "SLASH", "VBAR", "AMPER", 
                      "LESS", "GREATER", "EQUAL", "PERCENT", "EQEQUAL", 
                      "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "TILDE", 
                      "CIRCUMFLEX", "LEFTSHIFT", "RIGHTSHIFT", "DOUBLESTAR", 
                      "PLUSEQUAL", "MINEQUAL", "STAREQUAL", "SLASHEQUAL", 
                      "PERCENTEQUAL", "AMPEREQUAL", "VBAREQUAL", "CIRCUMFLEXEQUAL", 
                      "LEFTSHIFTEQUAL", "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", 
                      "DOUBLESLASH", "DOUBLESLASHEQUAL", "AT", "ATEQUAL", 
                      "RARROW", "ELLIPSIS", "COLONEQUAL", "EXCLAMATION", 
                      "PLUS_OR_MINUS", "PLUS_OR_MINU2", "NAME", "NUMBER", 
                      "STRING", "TYPE_COMMENT", "NEWLINE", "COMMENT", "WS", 
                      "EXPLICIT_LINE_JOINING", "ERROR_TOKEN" ]

    RULE_file_input = 0
    RULE_interactive = 1
    RULE_eval = 2
    RULE_func_type = 3
    RULE_fstring_input = 4
    RULE_statements = 5
    RULE_statement = 6
    RULE_statement_newline = 7
    RULE_simple_stmts = 8
    RULE_simple_stmt = 9
    RULE_compound_stmt = 10
    RULE_assignment = 11
    RULE_annotated_rhs = 12
    RULE_augassign = 13
    RULE_return_stmt = 14
    RULE_raise_stmt = 15
    RULE_global_stmt = 16
    RULE_nonlocal_stmt = 17
    RULE_del_stmt = 18
    RULE_yield_stmt = 19
    RULE_assert_stmt = 20
    RULE_import_stmt = 21
    RULE_connect_stmt = 22
    RULE_import_name = 23
    RULE_import_from = 24
    RULE_import_from_targets = 25
    RULE_import_from_as_names = 26
    RULE_import_from_as_name = 27
    RULE_dotted_as_names = 28
    RULE_dotted_as_name = 29
    RULE_dotted_name = 30
    RULE_block = 31
    RULE_decorators = 32
    RULE_class_def = 33
    RULE_class_def_raw = 34
    RULE_function_def = 35
    RULE_function_def_raw = 36
    RULE_params = 37
    RULE_parameters = 38
    RULE_slash_no_default = 39
    RULE_slash_with_default = 40
    RULE_star_etc = 41
    RULE_kwds = 42
    RULE_param_no_default = 43
    RULE_param_no_default_star_annotation = 44
    RULE_param_with_default = 45
    RULE_param_maybe_default = 46
    RULE_param = 47
    RULE_param_star_annotation = 48
    RULE_annotation = 49
    RULE_star_annotation = 50
    RULE_default_assignment = 51
    RULE_if_stmt = 52
    RULE_elif_stmt = 53
    RULE_else_block = 54
    RULE_while_stmt = 55
    RULE_for_stmt = 56
    RULE_with_stmt = 57
    RULE_with_item = 58
    RULE_try_stmt = 59
    RULE_except_block = 60
    RULE_except_star_block = 61
    RULE_finally_block = 62
    RULE_match_stmt = 63
    RULE_subject_expr = 64
    RULE_case_block = 65
    RULE_guard = 66
    RULE_patterns = 67
    RULE_pattern = 68
    RULE_as_pattern = 69
    RULE_or_pattern = 70
    RULE_closed_pattern = 71
    RULE_literal_pattern = 72
    RULE_literal_expr = 73
    RULE_signed_dimensioned_number = 74
    RULE_complex_number = 75
    RULE_signed_number = 76
    RULE_signed_real_number = 77
    RULE_real_number = 78
    RULE_imaginary_number = 79
    RULE_capture_pattern = 80
    RULE_pattern_capture_target = 81
    RULE_wildcard_pattern = 82
    RULE_value_pattern = 83
    RULE_attr = 84
    RULE_name_or_attr = 85
    RULE_group_pattern = 86
    RULE_sequence_pattern = 87
    RULE_open_sequence_pattern = 88
    RULE_maybe_sequence_pattern = 89
    RULE_maybe_star_pattern = 90
    RULE_star_pattern = 91
    RULE_mapping_pattern = 92
    RULE_items_pattern = 93
    RULE_key_value_pattern = 94
    RULE_double_star_pattern = 95
    RULE_class_pattern = 96
    RULE_positional_patterns = 97
    RULE_keyword_patterns = 98
    RULE_keyword_pattern = 99
    RULE_type_alias = 100
    RULE_type_params = 101
    RULE_type_param_seq = 102
    RULE_type_param = 103
    RULE_type_param_bound = 104
    RULE_expressions = 105
    RULE_expression = 106
    RULE_yield_expr = 107
    RULE_star_expressions = 108
    RULE_star_expression = 109
    RULE_star_named_expressions = 110
    RULE_star_named_expression = 111
    RULE_assignment_expression = 112
    RULE_named_expression = 113
    RULE_disjunction = 114
    RULE_conjunction = 115
    RULE_inversion = 116
    RULE_comparison = 117
    RULE_compare_op_bitwise_or_pair = 118
    RULE_eq_bitwise_or = 119
    RULE_noteq_bitwise_or = 120
    RULE_lte_bitwise_or = 121
    RULE_lt_bitwise_or = 122
    RULE_gte_bitwise_or = 123
    RULE_gt_bitwise_or = 124
    RULE_notin_bitwise_or = 125
    RULE_in_bitwise_or = 126
    RULE_isnot_bitwise_or = 127
    RULE_is_bitwise_or = 128
    RULE_bitwise_or = 129
    RULE_bitwise_xor = 130
    RULE_bitwise_and = 131
    RULE_shift_expr = 132
    RULE_sum = 133
    RULE_term = 134
    RULE_tolerance = 135
    RULE_factor = 136
    RULE_power = 137
    RULE_await_primary = 138
    RULE_primary = 139
    RULE_slices = 140
    RULE_slice = 141
    RULE_atom = 142
    RULE_dimensioned_number = 143
    RULE_group = 144
    RULE_lambdef = 145
    RULE_lambda_params = 146
    RULE_lambda_parameters = 147
    RULE_lambda_slash_no_default = 148
    RULE_lambda_slash_with_default = 149
    RULE_lambda_star_etc = 150
    RULE_lambda_kwds = 151
    RULE_lambda_param_no_default = 152
    RULE_lambda_param_with_default = 153
    RULE_lambda_param_maybe_default = 154
    RULE_lambda_param = 155
    RULE_fstring_middle = 156
    RULE_fstring_replacement_field = 157
    RULE_fstring_conversion = 158
    RULE_fstring_full_format_spec = 159
    RULE_fstring_format_spec = 160
    RULE_fstring = 161
    RULE_string = 162
    RULE_strings = 163
    RULE_list = 164
    RULE_tuple = 165
    RULE_set = 166
    RULE_dict = 167
    RULE_double_starred_kvpairs = 168
    RULE_double_starred_kvpair = 169
    RULE_kvpair = 170
    RULE_for_if_clauses = 171
    RULE_for_if_clause = 172
    RULE_listcomp = 173
    RULE_setcomp = 174
    RULE_genexp = 175
    RULE_dictcomp = 176
    RULE_arguments = 177
    RULE_args = 178
    RULE_kwargs = 179
    RULE_starred_expression = 180
    RULE_kwarg_or_starred = 181
    RULE_kwarg_or_double_starred = 182
    RULE_star_targets = 183
    RULE_star_targets_list_seq = 184
    RULE_star_targets_tuple_seq = 185
    RULE_star_target = 186
    RULE_target_with_star_atom = 187
    RULE_star_atom = 188
    RULE_single_target = 189
    RULE_single_subscript_attribute_target = 190
    RULE_t_primary = 191
    RULE_del_targets = 192
    RULE_del_target = 193
    RULE_del_t_atom = 194
    RULE_type_expressions = 195
    RULE_func_type_comment = 196
    RULE_soft_kw_type = 197
    RULE_soft_kw_match = 198
    RULE_soft_kw_case = 199
    RULE_soft_kw_wildcard = 200
    RULE_soft_kw__not__wildcard = 201

    ruleNames =  [ "file_input", "interactive", "eval", "func_type", "fstring_input", 
                   "statements", "statement", "statement_newline", "simple_stmts", 
                   "simple_stmt", "compound_stmt", "assignment", "annotated_rhs", 
                   "augassign", "return_stmt", "raise_stmt", "global_stmt", 
                   "nonlocal_stmt", "del_stmt", "yield_stmt", "assert_stmt", 
                   "import_stmt", "connect_stmt", "import_name", "import_from", 
                   "import_from_targets", "import_from_as_names", "import_from_as_name", 
                   "dotted_as_names", "dotted_as_name", "dotted_name", "block", 
                   "decorators", "class_def", "class_def_raw", "function_def", 
                   "function_def_raw", "params", "parameters", "slash_no_default", 
                   "slash_with_default", "star_etc", "kwds", "param_no_default", 
                   "param_no_default_star_annotation", "param_with_default", 
                   "param_maybe_default", "param", "param_star_annotation", 
                   "annotation", "star_annotation", "default_assignment", 
                   "if_stmt", "elif_stmt", "else_block", "while_stmt", "for_stmt", 
                   "with_stmt", "with_item", "try_stmt", "except_block", 
                   "except_star_block", "finally_block", "match_stmt", "subject_expr", 
                   "case_block", "guard", "patterns", "pattern", "as_pattern", 
                   "or_pattern", "closed_pattern", "literal_pattern", "literal_expr", 
                   "signed_dimensioned_number", "complex_number", "signed_number", 
                   "signed_real_number", "real_number", "imaginary_number", 
                   "capture_pattern", "pattern_capture_target", "wildcard_pattern", 
                   "value_pattern", "attr", "name_or_attr", "group_pattern", 
                   "sequence_pattern", "open_sequence_pattern", "maybe_sequence_pattern", 
                   "maybe_star_pattern", "star_pattern", "mapping_pattern", 
                   "items_pattern", "key_value_pattern", "double_star_pattern", 
                   "class_pattern", "positional_patterns", "keyword_patterns", 
                   "keyword_pattern", "type_alias", "type_params", "type_param_seq", 
                   "type_param", "type_param_bound", "expressions", "expression", 
                   "yield_expr", "star_expressions", "star_expression", 
                   "star_named_expressions", "star_named_expression", "assignment_expression", 
                   "named_expression", "disjunction", "conjunction", "inversion", 
                   "comparison", "compare_op_bitwise_or_pair", "eq_bitwise_or", 
                   "noteq_bitwise_or", "lte_bitwise_or", "lt_bitwise_or", 
                   "gte_bitwise_or", "gt_bitwise_or", "notin_bitwise_or", 
                   "in_bitwise_or", "isnot_bitwise_or", "is_bitwise_or", 
                   "bitwise_or", "bitwise_xor", "bitwise_and", "shift_expr", 
                   "sum", "term", "tolerance", "factor", "power", "await_primary", 
                   "primary", "slices", "slice", "atom", "dimensioned_number", 
                   "group", "lambdef", "lambda_params", "lambda_parameters", 
                   "lambda_slash_no_default", "lambda_slash_with_default", 
                   "lambda_star_etc", "lambda_kwds", "lambda_param_no_default", 
                   "lambda_param_with_default", "lambda_param_maybe_default", 
                   "lambda_param", "fstring_middle", "fstring_replacement_field", 
                   "fstring_conversion", "fstring_full_format_spec", "fstring_format_spec", 
                   "fstring", "string", "strings", "list", "tuple", "set", 
                   "dict", "double_starred_kvpairs", "double_starred_kvpair", 
                   "kvpair", "for_if_clauses", "for_if_clause", "listcomp", 
                   "setcomp", "genexp", "dictcomp", "arguments", "args", 
                   "kwargs", "starred_expression", "kwarg_or_starred", "kwarg_or_double_starred", 
                   "star_targets", "star_targets_list_seq", "star_targets_tuple_seq", 
                   "star_target", "target_with_star_atom", "star_atom", 
                   "single_target", "single_subscript_attribute_target", 
                   "t_primary", "del_targets", "del_target", "del_t_atom", 
                   "type_expressions", "func_type_comment", "soft_kw_type", 
                   "soft_kw_match", "soft_kw_case", "soft_kw_wildcard", 
                   "soft_kw__not__wildcard" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    FSTRING_START=3
    FSTRING_MIDDLE=4
    FSTRING_END=5
    FALSE=6
    AWAIT=7
    ELSE=8
    IMPORT=9
    PASS=10
    NONE=11
    BREAK=12
    EXCEPT=13
    IN=14
    RAISE=15
    TRUE=16
    CLASS=17
    FINALLY=18
    IS=19
    RETURN=20
    AND=21
    CONTINUE=22
    FOR=23
    LAMBDA=24
    TRY=25
    AS=26
    DEF=27
    FROM=28
    NONLOCAL=29
    WHILE=30
    ASSERT=31
    DEL=32
    GLOBAL=33
    NOT=34
    WITH=35
    ASYNC=36
    ELIF=37
    IF=38
    OR=39
    YIELD=40
    WITHIN=41
    TO=42
    LPAR=43
    LSQB=44
    LBRACE=45
    RPAR=46
    RSQB=47
    RBRACE=48
    DOT=49
    COLON=50
    COMMA=51
    SEMI=52
    PLUS=53
    MINUS=54
    STAR=55
    SLASH=56
    VBAR=57
    AMPER=58
    LESS=59
    GREATER=60
    EQUAL=61
    PERCENT=62
    EQEQUAL=63
    NOTEQUAL=64
    LESSEQUAL=65
    GREATEREQUAL=66
    TILDE=67
    CIRCUMFLEX=68
    LEFTSHIFT=69
    RIGHTSHIFT=70
    DOUBLESTAR=71
    PLUSEQUAL=72
    MINEQUAL=73
    STAREQUAL=74
    SLASHEQUAL=75
    PERCENTEQUAL=76
    AMPEREQUAL=77
    VBAREQUAL=78
    CIRCUMFLEXEQUAL=79
    LEFTSHIFTEQUAL=80
    RIGHTSHIFTEQUAL=81
    DOUBLESTAREQUAL=82
    DOUBLESLASH=83
    DOUBLESLASHEQUAL=84
    AT=85
    ATEQUAL=86
    RARROW=87
    ELLIPSIS=88
    COLONEQUAL=89
    EXCLAMATION=90
    PLUS_OR_MINUS=91
    PLUS_OR_MINU2=92
    NAME=93
    NUMBER=94
    STRING=95
    TYPE_COMMENT=96
    NEWLINE=97
    COMMENT=98
    WS=99
    EXPLICIT_LINE_JOINING=100
    ERROR_TOKEN=101

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def statements(self):
            return self.getTypedRuleContext(PythonParser.StatementsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_file_input

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = PythonParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 404
                self.statements()


            self.state = 407
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_newline(self):
            return self.getTypedRuleContext(PythonParser.Statement_newlineContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_interactive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractive" ):
                return visitor.visitInteractive(self)
            else:
                return visitor.visitChildren(self)




    def interactive(self):

        localctx = PythonParser.InteractiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_interactive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.statement_newline()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(PythonParser.ExpressionsContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_eval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval" ):
                return visitor.visitEval(self)
            else:
                return visitor.visitChildren(self)




    def eval_(self):

        localctx = PythonParser.EvalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.expressions()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==97:
                self.state = 412
                self.match(PythonParser.NEWLINE)
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 418
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def RARROW(self):
            return self.getToken(PythonParser.RARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def type_expressions(self):
            return self.getTypedRuleContext(PythonParser.Type_expressionsContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_func_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_type" ):
                return visitor.visitFunc_type(self)
            else:
                return visitor.visitChildren(self)




    def func_type(self):

        localctx = PythonParser.Func_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_func_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(PythonParser.LPAR)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63111984631056584) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859217) != 0):
                self.state = 421
                self.type_expressions()


            self.state = 424
            self.match(PythonParser.RPAR)
            self.state = 425
            self.match(PythonParser.RARROW)
            self.state = 426
            self.expression()
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==97:
                self.state = 427
                self.match(PythonParser.NEWLINE)
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 433
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_input

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_input" ):
                return visitor.visitFstring_input(self)
            else:
                return visitor.visitChildren(self)




    def fstring_input(self):

        localctx = PythonParser.Fstring_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fstring_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.star_expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StatementContext)
            else:
                return self.getTypedRuleContext(PythonParser.StatementContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_statements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = PythonParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 437
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 440 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = PythonParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_statement)
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 442
                self.compound_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.simple_stmts()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_newlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_statement_newline

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement_newline" ):
                return visitor.visitStatement_newline(self)
            else:
                return visitor.visitChildren(self)




    def statement_newline(self):

        localctx = PythonParser.Statement_newlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement_newline)
        try:
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self.compound_stmt()
                self.state = 447
                self.match(PythonParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 449
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 450
                self.match(PythonParser.NEWLINE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 451
                self.match(PythonParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(PythonParser.Simple_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.SEMI)
            else:
                return self.getToken(PythonParser.SEMI, i)

        def getRuleIndex(self):
            return PythonParser.RULE_simple_stmts

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmts" ):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmts(self):

        localctx = PythonParser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_simple_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.simple_stmt()
            self.state = 459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 455
                    self.match(PythonParser.SEMI)
                    self.state = 456
                    self.simple_stmt() 
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 462
                self.match(PythonParser.SEMI)


            self.state = 465
            self.match(PythonParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(PythonParser.AssignmentContext,0)


        def type_alias(self):
            return self.getTypedRuleContext(PythonParser.Type_aliasContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(PythonParser.Return_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(PythonParser.Import_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(PythonParser.Raise_stmtContext,0)


        def PASS(self):
            return self.getToken(PythonParser.PASS, 0)

        def del_stmt(self):
            return self.getTypedRuleContext(PythonParser.Del_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(PythonParser.Yield_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(PythonParser.Assert_stmtContext,0)


        def BREAK(self):
            return self.getToken(PythonParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(PythonParser.CONTINUE, 0)

        def global_stmt(self):
            return self.getTypedRuleContext(PythonParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(PythonParser.Nonlocal_stmtContext,0)


        def connect_stmt(self):
            return self.getTypedRuleContext(PythonParser.Connect_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_simple_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = PythonParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_simple_stmt)
        try:
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 467
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 468
                self.type_alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 469
                self.star_expressions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 470
                self.return_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 471
                self.import_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 472
                self.raise_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 473
                self.match(PythonParser.PASS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 474
                self.del_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 475
                self.yield_stmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 476
                self.assert_stmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 477
                self.match(PythonParser.BREAK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 478
                self.match(PythonParser.CONTINUE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 479
                self.global_stmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 480
                self.nonlocal_stmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 481
                self.connect_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_def(self):
            return self.getTypedRuleContext(PythonParser.Function_defContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(PythonParser.If_stmtContext,0)


        def class_def(self):
            return self.getTypedRuleContext(PythonParser.Class_defContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(PythonParser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(PythonParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(PythonParser.Try_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(PythonParser.While_stmtContext,0)


        def match_stmt(self):
            return self.getTypedRuleContext(PythonParser.Match_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_compound_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = PythonParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_compound_stmt)
        try:
            self.state = 492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 484
                self.function_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                self.if_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 486
                self.class_def()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 487
                self.with_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 488
                self.for_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 489
                self.try_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 490
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 491
                self.match_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.EQUAL)
            else:
                return self.getToken(PythonParser.EQUAL, i)

        def annotated_rhs(self):
            return self.getTypedRuleContext(PythonParser.Annotated_rhsContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def single_target(self):
            return self.getTypedRuleContext(PythonParser.Single_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(PythonParser.Single_subscript_attribute_targetContext,0)


        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def star_targets(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetsContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetsContext,i)


        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def augassign(self):
            return self.getTypedRuleContext(PythonParser.AugassignContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_assignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = PythonParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_assignment)
        self._la = 0 # Token type
        try:
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.match(PythonParser.NAME)
                self.state = 495
                self.match(PythonParser.COLON)
                self.state = 496
                self.expression()
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 497
                    self.match(PythonParser.EQUAL)
                    self.state = 498
                    self.annotated_rhs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 501
                    self.match(PythonParser.LPAR)
                    self.state = 502
                    self.single_target()
                    self.state = 503
                    self.match(PythonParser.RPAR)
                    pass

                elif la_ == 2:
                    self.state = 505
                    self.single_subscript_attribute_target()
                    pass


                self.state = 508
                self.match(PythonParser.COLON)
                self.state = 509
                self.expression()
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 510
                    self.match(PythonParser.EQUAL)
                    self.state = 511
                    self.annotated_rhs()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 517 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 514
                        self.star_targets()
                        self.state = 515
                        self.match(PythonParser.EQUAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 519 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                self.state = 523
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40]:
                    self.state = 521
                    self.yield_expr()
                    pass
                elif token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 53, 54, 55, 67, 88, 93, 94, 95]:
                    self.state = 522
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 525
                    self.match(PythonParser.TYPE_COMMENT)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 528
                self.single_target()
                self.state = 529
                self.augassign()
                self.state = 532
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40]:
                    self.state = 530
                    self.yield_expr()
                    pass
                elif token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 53, 54, 55, 67, 88, 93, 94, 95]:
                    self.state = 531
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotated_rhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_annotated_rhs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotated_rhs" ):
                return visitor.visitAnnotated_rhs(self)
            else:
                return visitor.visitChildren(self)




    def annotated_rhs(self):

        localctx = PythonParser.Annotated_rhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_annotated_rhs)
        try:
            self.state = 538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                self.yield_expr()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 53, 54, 55, 67, 88, 93, 94, 95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUSEQUAL(self):
            return self.getToken(PythonParser.PLUSEQUAL, 0)

        def MINEQUAL(self):
            return self.getToken(PythonParser.MINEQUAL, 0)

        def STAREQUAL(self):
            return self.getToken(PythonParser.STAREQUAL, 0)

        def ATEQUAL(self):
            return self.getToken(PythonParser.ATEQUAL, 0)

        def SLASHEQUAL(self):
            return self.getToken(PythonParser.SLASHEQUAL, 0)

        def PERCENTEQUAL(self):
            return self.getToken(PythonParser.PERCENTEQUAL, 0)

        def AMPEREQUAL(self):
            return self.getToken(PythonParser.AMPEREQUAL, 0)

        def VBAREQUAL(self):
            return self.getToken(PythonParser.VBAREQUAL, 0)

        def CIRCUMFLEXEQUAL(self):
            return self.getToken(PythonParser.CIRCUMFLEXEQUAL, 0)

        def LEFTSHIFTEQUAL(self):
            return self.getToken(PythonParser.LEFTSHIFTEQUAL, 0)

        def RIGHTSHIFTEQUAL(self):
            return self.getToken(PythonParser.RIGHTSHIFTEQUAL, 0)

        def DOUBLESTAREQUAL(self):
            return self.getToken(PythonParser.DOUBLESTAREQUAL, 0)

        def DOUBLESLASHEQUAL(self):
            return self.getToken(PythonParser.DOUBLESLASHEQUAL, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_augassign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = PythonParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 22527) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PythonParser.RETURN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_return_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = PythonParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(PythonParser.RETURN)
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63111984631056584) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859201) != 0):
                self.state = 543
                self.star_expressions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PythonParser.RAISE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_raise_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = PythonParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(PythonParser.RAISE)
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27083187612092616) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859201) != 0):
                self.state = 547
                self.expression()
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 548
                    self.match(PythonParser.FROM)
                    self.state = 549
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(PythonParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_global_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = PythonParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(PythonParser.GLOBAL)
            self.state = 555
            self.match(PythonParser.NAME)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51:
                self.state = 556
                self.match(PythonParser.COMMA)
                self.state = 557
                self.match(PythonParser.NAME)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(PythonParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_nonlocal_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = PythonParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(PythonParser.NONLOCAL)
            self.state = 564
            self.match(PythonParser.NAME)
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51:
                self.state = 565
                self.match(PythonParser.COMMA)
                self.state = 566
                self.match(PythonParser.NAME)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(PythonParser.DEL, 0)

        def del_targets(self):
            return self.getTypedRuleContext(PythonParser.Del_targetsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_del_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = PythonParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(PythonParser.DEL)
            self.state = 573
            self.del_targets()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = PythonParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(PythonParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_assert_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = PythonParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(PythonParser.ASSERT)
            self.state = 578
            self.expression()
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 579
                self.match(PythonParser.COMMA)
                self.state = 580
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(PythonParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(PythonParser.Import_fromContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_import_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = PythonParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_import_stmt)
        try:
            self.state = 585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.import_name()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Connect_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def TILDE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.TILDE)
            else:
                return self.getToken(PythonParser.TILDE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_connect_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnect_stmt" ):
                return visitor.visitConnect_stmt(self)
            else:
                return visitor.visitChildren(self)




    def connect_stmt(self):

        localctx = PythonParser.Connect_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_connect_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.expression()
            self.state = 590 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 588
                self.match(PythonParser.TILDE)
                self.state = 589
                self.expression()
                self.state = 592 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==67):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(PythonParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_import_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = PythonParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(PythonParser.IMPORT)
            self.state = 595
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)

        def import_from_targets(self):
            return self.getTypedRuleContext(PythonParser.Import_from_targetsContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.ELLIPSIS)
            else:
                return self.getToken(PythonParser.ELLIPSIS, i)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = PythonParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 597
                self.match(PythonParser.FROM)
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==49 or _la==88:
                    self.state = 598
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==88):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 604
                self.dotted_name(0)
                self.state = 605
                self.match(PythonParser.IMPORT)
                self.state = 606
                self.import_from_targets()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 608
                self.match(PythonParser.FROM)
                self.state = 610 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 609
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==88):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 612 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==49 or _la==88):
                        break

                self.state = 614
                self.match(PythonParser.IMPORT)
                self.state = 615
                self.import_from_targets()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def import_from_as_names(self):
            return self.getTypedRuleContext(PythonParser.Import_from_as_namesContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_targets

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from_targets" ):
                return visitor.visitImport_from_targets(self)
            else:
                return visitor.visitChildren(self)




    def import_from_targets(self):

        localctx = PythonParser.Import_from_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_import_from_targets)
        self._la = 0 # Token type
        try:
            self.state = 627
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 618
                self.match(PythonParser.LPAR)
                self.state = 619
                self.import_from_as_names()
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 620
                    self.match(PythonParser.COMMA)


                self.state = 623
                self.match(PythonParser.RPAR)
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.import_from_as_names()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 626
                self.match(PythonParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_from_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Import_from_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Import_from_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_as_names

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from_as_names" ):
                return visitor.visitImport_from_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_from_as_names(self):

        localctx = PythonParser.Import_from_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_from_as_names)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.import_from_as_name()
            self.state = 634
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 630
                    self.match(PythonParser.COMMA)
                    self.state = 631
                    self.import_from_as_name() 
                self.state = 636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_as_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from_as_name" ):
                return visitor.visitImport_from_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_from_as_name(self):

        localctx = PythonParser.Import_from_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_from_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(PythonParser.NAME)
            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 638
                self.match(PythonParser.AS)
                self.state = 639
                self.match(PythonParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_names

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = PythonParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.dotted_as_name()
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51:
                self.state = 643
                self.match(PythonParser.COMMA)
                self.state = 644
                self.dotted_as_name()
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = PythonParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.dotted_name(0)
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 651
                self.match(PythonParser.AS)
                self.state = 652
                self.match(PythonParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(PythonParser.NAME)
            self._ctx.stop = self._input.LT(-1)
            self.state = 663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 658
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 659
                    self.match(PythonParser.DOT)
                    self.state = 660
                    self.match(PythonParser.NAME) 
                self.state = 665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonParser.INDENT, 0)

        def statements(self):
            return self.getTypedRuleContext(PythonParser.StatementsContext,0)


        def DEDENT(self):
            return self.getToken(PythonParser.DEDENT, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = PythonParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_block)
        try:
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.match(PythonParser.NEWLINE)
                self.state = 667
                self.match(PythonParser.INDENT)
                self.state = 668
                self.statements()
                self.state = 669
                self.match(PythonParser.DEDENT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.simple_stmts()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.AT)
            else:
                return self.getToken(PythonParser.AT, i)

        def named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Named_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Named_expressionContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_decorators

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = PythonParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 674
                self.match(PythonParser.AT)
                self.state = 675
                self.named_expression()
                self.state = 676
                self.match(PythonParser.NEWLINE)
                self.state = 680 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==85):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonParser.DecoratorsContext,0)


        def class_def_raw(self):
            return self.getTypedRuleContext(PythonParser.Class_def_rawContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_class_def

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_def" ):
                return visitor.visitClass_def(self)
            else:
                return visitor.visitChildren(self)




    def class_def(self):

        localctx = PythonParser.Class_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_class_def)
        try:
            self.state = 686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 682
                self.decorators()
                self.state = 683
                self.class_def_raw()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 685
                self.class_def_raw()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_def_rawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PythonParser.CLASS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_class_def_raw

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_def_raw" ):
                return visitor.visitClass_def_raw(self)
            else:
                return visitor.visitChildren(self)




    def class_def_raw(self):

        localctx = PythonParser.Class_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_class_def_raw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(PythonParser.CLASS)
            self.state = 689
            self.match(PythonParser.NAME)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 690
                self.type_params()


            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 693
                self.match(PythonParser.LPAR)
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63111984631056584) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859217) != 0):
                    self.state = 694
                    self.arguments()


                self.state = 697
                self.match(PythonParser.RPAR)


            self.state = 700
            self.match(PythonParser.COLON)
            self.state = 701
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonParser.DecoratorsContext,0)


        def function_def_raw(self):
            return self.getTypedRuleContext(PythonParser.Function_def_rawContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_function_def

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_def" ):
                return visitor.visitFunction_def(self)
            else:
                return visitor.visitChildren(self)




    def function_def(self):

        localctx = PythonParser.Function_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_function_def)
        try:
            self.state = 707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 703
                self.decorators()
                self.state = 704
                self.function_def_raw()
                pass
            elif token in [27, 36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.function_def_raw()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_def_rawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PythonParser.DEF, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def params(self):
            return self.getTypedRuleContext(PythonParser.ParamsContext,0)


        def RARROW(self):
            return self.getToken(PythonParser.RARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def func_type_comment(self):
            return self.getTypedRuleContext(PythonParser.Func_type_commentContext,0)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_function_def_raw

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_def_raw" ):
                return visitor.visitFunction_def_raw(self)
            else:
                return visitor.visitChildren(self)




    def function_def_raw(self):

        localctx = PythonParser.Function_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_function_def_raw)
        self._la = 0 # Token type
        try:
            self.state = 748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 709
                self.match(PythonParser.DEF)
                self.state = 710
                self.match(PythonParser.NAME)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 711
                    self.type_params()


                self.state = 714
                self.match(PythonParser.LPAR)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 274877972481) != 0):
                    self.state = 715
                    self.params()


                self.state = 718
                self.match(PythonParser.RPAR)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 719
                    self.match(PythonParser.RARROW)
                    self.state = 720
                    self.expression()


                self.state = 723
                self.match(PythonParser.COLON)
                self.state = 725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 724
                    self.func_type_comment()


                self.state = 727
                self.block()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.match(PythonParser.ASYNC)
                self.state = 729
                self.match(PythonParser.DEF)
                self.state = 730
                self.match(PythonParser.NAME)
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 731
                    self.type_params()


                self.state = 734
                self.match(PythonParser.LPAR)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 274877972481) != 0):
                    self.state = 735
                    self.params()


                self.state = 738
                self.match(PythonParser.RPAR)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 739
                    self.match(PythonParser.RARROW)
                    self.state = 740
                    self.expression()


                self.state = 743
                self.match(PythonParser.COLON)
                self.state = 745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 744
                    self.func_type_comment()


                self.state = 747
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(PythonParser.ParametersContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_params

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParams" ):
                return visitor.visitParams(self)
            else:
                return visitor.visitChildren(self)




    def params(self):

        localctx = PythonParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slash_no_default(self):
            return self.getTypedRuleContext(PythonParser.Slash_no_defaultContext,0)


        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_with_defaultContext,i)


        def star_etc(self):
            return self.getTypedRuleContext(PythonParser.Star_etcContext,0)


        def slash_with_default(self):
            return self.getTypedRuleContext(PythonParser.Slash_with_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = PythonParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.slash_no_default()
                self.state = 756
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 753
                        self.param_no_default() 
                    self.state = 758
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==93:
                    self.state = 759
                    self.param_with_default()
                    self.state = 764
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55 or _la==71:
                    self.state = 765
                    self.star_etc()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 768
                self.slash_with_default()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==93:
                    self.state = 769
                    self.param_with_default()
                    self.state = 774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55 or _la==71:
                    self.state = 775
                    self.star_etc()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 779 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 778
                        self.param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 781 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==93:
                    self.state = 783
                    self.param_with_default()
                    self.state = 788
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55 or _la==71:
                    self.state = 789
                    self.star_etc()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 793 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 792
                    self.param_with_default()
                    self.state = 795 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==93):
                        break

                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55 or _la==71:
                    self.state = 797
                    self.star_etc()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 800
                self.star_etc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slash_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_slash_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlash_no_default" ):
                return visitor.visitSlash_no_default(self)
            else:
                return visitor.visitChildren(self)




    def slash_no_default(self):

        localctx = PythonParser.Slash_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_slash_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 803
                self.param_no_default()
                self.state = 806 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==93):
                    break

            self.state = 808
            self.match(PythonParser.SLASH)
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 809
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slash_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_with_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_slash_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlash_with_default" ):
                return visitor.visitSlash_with_default(self)
            else:
                return visitor.visitChildren(self)




    def slash_with_default(self):

        localctx = PythonParser.Slash_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_slash_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 812
                    self.param_no_default() 
                self.state = 817
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

            self.state = 819 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 818
                self.param_with_default()
                self.state = 821 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==93):
                    break

            self.state = 823
            self.match(PythonParser.SLASH)
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 824
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_etcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,0)


        def param_maybe_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_maybe_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_maybe_defaultContext,i)


        def kwds(self):
            return self.getTypedRuleContext(PythonParser.KwdsContext,0)


        def param_no_default_star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Param_no_default_star_annotationContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_star_etc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_etc" ):
                return visitor.visitStar_etc(self)
            else:
                return visitor.visitChildren(self)




    def star_etc(self):

        localctx = PythonParser.Star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_star_etc)
        self._la = 0 # Token type
        try:
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 827
                self.match(PythonParser.STAR)
                self.state = 828
                self.param_no_default()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==93:
                    self.state = 829
                    self.param_maybe_default()
                    self.state = 834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 835
                    self.kwds()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 838
                self.match(PythonParser.STAR)
                self.state = 839
                self.param_no_default_star_annotation()
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==93:
                    self.state = 840
                    self.param_maybe_default()
                    self.state = 845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 846
                    self.kwds()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 849
                self.match(PythonParser.STAR)
                self.state = 850
                self.match(PythonParser.COMMA)
                self.state = 852 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 851
                    self.param_maybe_default()
                    self.state = 854 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==93):
                        break

                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 856
                    self.kwds()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 859
                self.kwds()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_kwds

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwds" ):
                return visitor.visitKwds(self)
            else:
                return visitor.visitChildren(self)




    def kwds(self):

        localctx = PythonParser.KwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(PythonParser.DOUBLESTAR)
            self.state = 863
            self.param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_no_default" ):
                return visitor.visitParam_no_default(self)
            else:
                return visitor.visitChildren(self)




    def param_no_default(self):

        localctx = PythonParser.Param_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_param_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.param()
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 866
                self.match(PythonParser.COMMA)


            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 869
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_no_default_star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Param_star_annotationContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_no_default_star_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_no_default_star_annotation" ):
                return visitor.visitParam_no_default_star_annotation(self)
            else:
                return visitor.visitChildren(self)




    def param_no_default_star_annotation(self):

        localctx = PythonParser.Param_no_default_star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_param_no_default_star_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.param_star_annotation()
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 873
                self.match(PythonParser.COMMA)


            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 876
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_with_default" ):
                return visitor.visitParam_with_default(self)
            else:
                return visitor.visitChildren(self)




    def param_with_default(self):

        localctx = PythonParser.Param_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_param_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.param()
            self.state = 880
            self.default_assignment()
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 881
                self.match(PythonParser.COMMA)


            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 884
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_maybe_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_maybe_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_maybe_default" ):
                return visitor.visitParam_maybe_default(self)
            else:
                return visitor.visitChildren(self)




    def param_maybe_default(self):

        localctx = PythonParser.Param_maybe_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_param_maybe_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.param()
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 888
                self.default_assignment()


            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 891
                self.match(PythonParser.COMMA)


            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 894
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def annotation(self):
            return self.getTypedRuleContext(PythonParser.AnnotationContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_param

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = PythonParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(PythonParser.NAME)
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 898
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Star_annotationContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_param_star_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_star_annotation" ):
                return visitor.visitParam_star_annotation(self)
            else:
                return visitor.visitChildren(self)




    def param_star_annotation(self):

        localctx = PythonParser.Param_star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_param_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(PythonParser.NAME)
            self.state = 902
            self.star_annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = PythonParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.match(PythonParser.COLON)
            self.state = 905
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def star_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_annotation" ):
                return visitor.visitStar_annotation(self)
            else:
                return visitor.visitChildren(self)




    def star_annotation(self):

        localctx = PythonParser.Star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(PythonParser.COLON)
            self.state = 908
            self.star_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_default_assignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_assignment" ):
                return visitor.visitDefault_assignment(self)
            else:
                return visitor.visitChildren(self)




    def default_assignment(self):

        localctx = PythonParser.Default_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_default_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(PythonParser.EQUAL)
            self.state = 911
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def elif_stmt(self):
            return self.getTypedRuleContext(PythonParser.Elif_stmtContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_if_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = PythonParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(PythonParser.IF)
            self.state = 914
            self.named_expression()
            self.state = 915
            self.match(PythonParser.COLON)
            self.state = 916
            self.block()
            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 917
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.state = 919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 918
                    self.else_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(PythonParser.ELIF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def elif_stmt(self):
            return self.getTypedRuleContext(PythonParser.Elif_stmtContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_elif_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_stmt" ):
                return visitor.visitElif_stmt(self)
            else:
                return visitor.visitChildren(self)




    def elif_stmt(self):

        localctx = PythonParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(PythonParser.ELIF)
            self.state = 924
            self.named_expression()
            self.state = 925
            self.match(PythonParser.COLON)
            self.state = 926
            self.block()
            self.state = 931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 927
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.state = 929
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 928
                    self.else_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_else_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_block" ):
                return visitor.visitElse_block(self)
            else:
                return visitor.visitChildren(self)




    def else_block(self):

        localctx = PythonParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_else_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(PythonParser.ELSE)
            self.state = 934
            self.match(PythonParser.COLON)
            self.state = 935
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PythonParser.WHILE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_while_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = PythonParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(PythonParser.WHILE)
            self.state = 938
            self.named_expression()
            self.state = 939
            self.match(PythonParser.COLON)
            self.state = 940
            self.block()
            self.state = 942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 941
                self.else_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(PythonParser.Star_targetsContext,0)


        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_for_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = PythonParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 944
                self.match(PythonParser.ASYNC)


            self.state = 947
            self.match(PythonParser.FOR)
            self.state = 948
            self.star_targets()
            self.state = 949
            self.match(PythonParser.IN)
            self.state = 950
            self.star_expressions()
            self.state = 951
            self.match(PythonParser.COLON)
            self.state = 953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 952
                self.match(PythonParser.TYPE_COMMENT)


            self.state = 955
            self.block()
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 956
                self.else_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PythonParser.WITH, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PythonParser.With_itemContext,i)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_with_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = PythonParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 959
                self.match(PythonParser.ASYNC)


            self.state = 962
            self.match(PythonParser.WITH)
            self.state = 990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 963
                self.match(PythonParser.LPAR)
                self.state = 964
                self.with_item()
                self.state = 969
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 965
                        self.match(PythonParser.COMMA)
                        self.state = 966
                        self.with_item() 
                    self.state = 971
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 972
                    self.match(PythonParser.COMMA)


                self.state = 975
                self.match(PythonParser.RPAR)
                self.state = 976
                self.match(PythonParser.COLON)
                pass

            elif la_ == 2:
                self.state = 978
                self.with_item()
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 979
                    self.match(PythonParser.COMMA)
                    self.state = 980
                    self.with_item()
                    self.state = 985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 986
                self.match(PythonParser.COLON)
                self.state = 988
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 987
                    self.match(PythonParser.TYPE_COMMENT)


                pass


            self.state = 992
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def star_target(self):
            return self.getTypedRuleContext(PythonParser.Star_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_with_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = PythonParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.expression()
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 995
                self.match(PythonParser.AS)
                self.state = 996
                self.star_target()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(PythonParser.TRY, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def finally_block(self):
            return self.getTypedRuleContext(PythonParser.Finally_blockContext,0)


        def except_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Except_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Except_blockContext,i)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def except_star_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Except_star_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Except_star_blockContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_try_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = PythonParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_try_stmt)
        try:
            self.state = 1032
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.match(PythonParser.TRY)
                self.state = 1000
                self.match(PythonParser.COLON)
                self.state = 1001
                self.block()
                self.state = 1002
                self.finally_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004
                self.match(PythonParser.TRY)
                self.state = 1005
                self.match(PythonParser.COLON)
                self.state = 1006
                self.block()
                self.state = 1008 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1007
                        self.except_block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1010 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                self.state = 1013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 1012
                    self.else_block()


                self.state = 1016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 1015
                    self.finally_block()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1018
                self.match(PythonParser.TRY)
                self.state = 1019
                self.match(PythonParser.COLON)
                self.state = 1020
                self.block()
                self.state = 1022 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1021
                        self.except_star_block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1024 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 1027
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1026
                    self.else_block()


                self.state = 1030
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1029
                    self.finally_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_except_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_block" ):
                return visitor.visitExcept_block(self)
            else:
                return visitor.visitChildren(self)




    def except_block(self):

        localctx = PythonParser.Except_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_except_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(PythonParser.EXCEPT)
            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27083187612092616) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859201) != 0):
                self.state = 1035
                self.expression()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==26:
                    self.state = 1036
                    self.match(PythonParser.AS)
                    self.state = 1037
                    self.match(PythonParser.NAME)




            self.state = 1042
            self.match(PythonParser.COLON)
            self.state = 1043
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_star_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonParser.EXCEPT, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_except_star_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_star_block" ):
                return visitor.visitExcept_star_block(self)
            else:
                return visitor.visitChildren(self)




    def except_star_block(self):

        localctx = PythonParser.Except_star_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_except_star_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(PythonParser.EXCEPT)
            self.state = 1046
            self.match(PythonParser.STAR)
            self.state = 1047
            self.expression()
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1048
                self.match(PythonParser.AS)
                self.state = 1049
                self.match(PythonParser.NAME)


            self.state = 1052
            self.match(PythonParser.COLON)
            self.state = 1053
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(PythonParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_finally_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_block" ):
                return visitor.visitFinally_block(self)
            else:
                return visitor.visitChildren(self)




    def finally_block(self):

        localctx = PythonParser.Finally_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_finally_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(PythonParser.FINALLY)
            self.state = 1056
            self.match(PythonParser.COLON)
            self.state = 1057
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_match(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_matchContext,0)


        def subject_expr(self):
            return self.getTypedRuleContext(PythonParser.Subject_exprContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PythonParser.DEDENT, 0)

        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Case_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Case_blockContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_match_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_stmt" ):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)




    def match_stmt(self):

        localctx = PythonParser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_match_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.soft_kw_match()
            self.state = 1060
            self.subject_expr()
            self.state = 1061
            self.match(PythonParser.COLON)
            self.state = 1062
            self.match(PythonParser.NEWLINE)
            self.state = 1063
            self.match(PythonParser.INDENT)
            self.state = 1065 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1064
                    self.case_block()

                else:
                    raise NoViableAltException(self)
                self.state = 1067 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

            self.state = 1069
            self.match(PythonParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subject_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_subject_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubject_expr" ):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)




    def subject_expr(self):

        localctx = PythonParser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_subject_expr)
        self._la = 0 # Token type
        try:
            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1071
                self.star_named_expression()
                self.state = 1072
                self.match(PythonParser.COMMA)
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63111984631056584) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859201) != 0):
                    self.state = 1073
                    self.star_named_expressions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1076
                self.named_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_case(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_caseContext,0)


        def patterns(self):
            return self.getTypedRuleContext(PythonParser.PatternsContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(PythonParser.GuardContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_case_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_block" ):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)




    def case_block(self):

        localctx = PythonParser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.soft_kw_case()
            self.state = 1080
            self.patterns()
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 1081
                self.guard()


            self.state = 1084
            self.match(PythonParser.COLON)
            self.state = 1085
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_guard

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard" ):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)




    def guard(self):

        localctx = PythonParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(PythonParser.IF)
            self.state = 1088
            self.named_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Open_sequence_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_patterns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatterns" ):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)




    def patterns(self):

        localctx = PythonParser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_patterns)
        try:
            self.state = 1092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1090
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1091
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(PythonParser.As_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(PythonParser.Or_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = PythonParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_pattern)
        try:
            self.state = 1096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.or_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(PythonParser.Or_patternContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_as_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_pattern" ):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)




    def as_pattern(self):

        localctx = PythonParser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.or_pattern()
            self.state = 1099
            self.match(PythonParser.AS)
            self.state = 1100
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Closed_patternContext,i)


        def VBAR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.VBAR)
            else:
                return self.getToken(PythonParser.VBAR, i)

        def getRuleIndex(self):
            return PythonParser.RULE_or_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_pattern" ):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)




    def or_pattern(self):

        localctx = PythonParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_or_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.closed_pattern()
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 1103
                self.match(PythonParser.VBAR)
                self.state = 1104
                self.closed_pattern()
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closed_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_pattern(self):
            return self.getTypedRuleContext(PythonParser.Literal_patternContext,0)


        def capture_pattern(self):
            return self.getTypedRuleContext(PythonParser.Capture_patternContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(PythonParser.Wildcard_patternContext,0)


        def value_pattern(self):
            return self.getTypedRuleContext(PythonParser.Value_patternContext,0)


        def group_pattern(self):
            return self.getTypedRuleContext(PythonParser.Group_patternContext,0)


        def sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Sequence_patternContext,0)


        def mapping_pattern(self):
            return self.getTypedRuleContext(PythonParser.Mapping_patternContext,0)


        def class_pattern(self):
            return self.getTypedRuleContext(PythonParser.Class_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_closed_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosed_pattern" ):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)




    def closed_pattern(self):

        localctx = PythonParser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_closed_pattern)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1110
                self.literal_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.capture_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1112
                self.wildcard_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1113
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1114
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1115
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1116
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1117
                self.class_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_numberContext,0)


        def signed_dimensioned_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_dimensioned_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(PythonParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_literal_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_pattern" ):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)




    def literal_pattern(self):

        localctx = PythonParser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_literal_pattern)
        try:
            self.state = 1127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1121
                self.signed_dimensioned_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1122
                self.complex_number()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1123
                self.strings()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1124
                self.match(PythonParser.NONE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1125
                self.match(PythonParser.TRUE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1126
                self.match(PythonParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_numberContext,0)


        def signed_dimensioned_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_dimensioned_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(PythonParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_literal_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_expr" ):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)




    def literal_expr(self):

        localctx = PythonParser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_literal_expr)
        try:
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1129
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1130
                self.signed_dimensioned_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1131
                self.complex_number()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1132
                self.strings()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1133
                self.match(PythonParser.NONE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1134
                self.match(PythonParser.TRUE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1135
                self.match(PythonParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_dimensioned_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def STRING(self):
            return self.getToken(PythonParser.STRING, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_signed_dimensioned_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_dimensioned_number" ):
                return visitor.visitSigned_dimensioned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_dimensioned_number(self):

        localctx = PythonParser.Signed_dimensioned_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_signed_dimensioned_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 1138
                self.match(PythonParser.MINUS)


            self.state = 1141
            self.match(PythonParser.NUMBER)
            self.state = 1142
            _la = self._input.LA(1)
            if not(_la==93 or _la==95):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Complex_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_real_numberContext,0)


        def imaginary_number(self):
            return self.getTypedRuleContext(PythonParser.Imaginary_numberContext,0)


        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_complex_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex_number" ):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)




    def complex_number(self):

        localctx = PythonParser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_complex_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.signed_real_number()
            self.state = 1145
            _la = self._input.LA(1)
            if not(_la==53 or _la==54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1146
            self.imaginary_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_signed_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = PythonParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 1148
                self.match(PythonParser.MINUS)


            self.state = 1151
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(PythonParser.Real_numberContext,0)


        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_signed_real_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_real_number" ):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_real_number(self):

        localctx = PythonParser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_signed_real_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 1153
                self.match(PythonParser.MINUS)


            self.state = 1156
            self.real_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_real_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReal_number" ):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)




    def real_number(self):

        localctx = PythonParser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Imaginary_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_imaginary_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImaginary_number" ):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)




    def imaginary_number(self):

        localctx = PythonParser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_capture_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_pattern" ):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)




    def capture_pattern(self):

        localctx = PythonParser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_capture_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw__not__wildcard(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw__not__wildcardContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_pattern_capture_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern_capture_target" ):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)




    def pattern_capture_target(self):

        localctx = PythonParser.Pattern_capture_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.soft_kw__not__wildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_wildcard(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_wildcardContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_wildcard_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_pattern" ):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_pattern(self):

        localctx = PythonParser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.soft_kw_wildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(PythonParser.AttrContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_value_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_pattern" ):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)




    def value_pattern(self):

        localctx = PythonParser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def getRuleIndex(self):
            return PythonParser.RULE_attr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = PythonParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.match(PythonParser.NAME)
            self.state = 1173 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1171
                self.match(PythonParser.DOT)
                self.state = 1172
                self.match(PythonParser.NAME)
                self.state = 1175 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==49):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_or_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def getRuleIndex(self):
            return PythonParser.RULE_name_or_attr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_or_attr" ):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)




    def name_or_attr(self):

        localctx = PythonParser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_name_or_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(PythonParser.NAME)
            self.state = 1182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 1178
                self.match(PythonParser.DOT)
                self.state = 1179
                self.match(PythonParser.NAME)
                self.state = 1184
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_group_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_pattern" ):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)




    def group_pattern(self):

        localctx = PythonParser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(PythonParser.LPAR)
            self.state = 1186
            self.pattern()
            self.state = 1187
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_sequence_patternContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Open_sequence_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_sequence_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_pattern" ):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def sequence_pattern(self):

        localctx = PythonParser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_sequence_pattern)
        try:
            self.state = 1199
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1189
                self.match(PythonParser.LSQB)
                self.state = 1191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 1190
                    self.maybe_sequence_pattern()


                self.state = 1193
                self.match(PythonParser.RSQB)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.match(PythonParser.LPAR)
                self.state = 1196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1195
                    self.open_sequence_pattern()


                self.state = 1198
                self.match(PythonParser.RPAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_star_patternContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_sequence_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_open_sequence_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_sequence_pattern" ):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def open_sequence_pattern(self):

        localctx = PythonParser.Open_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_open_sequence_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.maybe_star_pattern()
            self.state = 1202
            self.match(PythonParser.COMMA)
            self.state = 1204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1203
                self.maybe_sequence_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Maybe_star_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Maybe_star_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_maybe_sequence_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_sequence_pattern" ):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_sequence_pattern(self):

        localctx = PythonParser.Maybe_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_maybe_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self.maybe_star_pattern()
            self.state = 1211
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1207
                    self.match(PythonParser.COMMA)
                    self.state = 1208
                    self.maybe_star_pattern() 
                self.state = 1213
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

            self.state = 1215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1214
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Star_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_maybe_star_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_star_pattern" ):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_star_pattern(self):

        localctx = PythonParser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_maybe_star_pattern)
        try:
            self.state = 1219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1217
                self.star_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1218
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(PythonParser.Wildcard_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_pattern" ):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)




    def star_pattern(self):

        localctx = PythonParser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_star_pattern)
        try:
            self.state = 1225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1221
                self.match(PythonParser.STAR)
                self.state = 1222
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1223
                self.match(PythonParser.STAR)
                self.state = 1224
                self.wildcard_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Double_star_patternContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(PythonParser.Items_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_mapping_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping_pattern" ):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)




    def mapping_pattern(self):

        localctx = PythonParser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_mapping_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1227
                self.match(PythonParser.LBRACE)
                self.state = 1228
                self.match(PythonParser.RBRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1229
                self.match(PythonParser.LBRACE)
                self.state = 1230
                self.double_star_pattern()
                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1231
                    self.match(PythonParser.COMMA)


                self.state = 1234
                self.match(PythonParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1236
                self.match(PythonParser.LBRACE)
                self.state = 1237
                self.items_pattern()
                self.state = 1240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1238
                    self.match(PythonParser.COMMA)
                    self.state = 1239
                    self.double_star_pattern()


                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1242
                    self.match(PythonParser.COMMA)


                self.state = 1245
                self.match(PythonParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Items_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Key_value_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Key_value_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_items_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItems_pattern" ):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)




    def items_pattern(self):

        localctx = PythonParser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            self.key_value_pattern()
            self.state = 1254
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1250
                    self.match(PythonParser.COMMA)
                    self.state = 1251
                    self.key_value_pattern() 
                self.state = 1256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def literal_expr(self):
            return self.getTypedRuleContext(PythonParser.Literal_exprContext,0)


        def attr(self):
            return self.getTypedRuleContext(PythonParser.AttrContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_key_value_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_value_pattern" ):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)




    def key_value_pattern(self):

        localctx = PythonParser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 6, 11, 16, 54, 94, 95]:
                self.state = 1257
                self.literal_expr()
                pass
            elif token in [93]:
                self.state = 1258
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1261
            self.match(PythonParser.COLON)
            self.state = 1262
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_double_star_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_star_pattern" ):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def double_star_pattern(self):

        localctx = PythonParser.Double_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(PythonParser.DOUBLESTAR)
            self.state = 1265
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(PythonParser.Name_or_attrContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(PythonParser.Positional_patternsContext,0)


        def keyword_patterns(self):
            return self.getTypedRuleContext(PythonParser.Keyword_patternsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_class_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_pattern" ):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)




    def class_pattern(self):

        localctx = PythonParser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_class_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.name_or_attr()
            self.state = 1268
            self.match(PythonParser.LPAR)
            self.state = 1280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1275
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 1269
                    self.positional_patterns()
                    self.state = 1272
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                    if la_ == 1:
                        self.state = 1270
                        self.match(PythonParser.COMMA)
                        self.state = 1271
                        self.keyword_patterns()


                    pass

                elif la_ == 2:
                    self.state = 1274
                    self.keyword_patterns()
                    pass


                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1277
                    self.match(PythonParser.COMMA)




            self.state = 1282
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positional_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.PatternContext)
            else:
                return self.getTypedRuleContext(PythonParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_positional_patterns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositional_patterns" ):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)




    def positional_patterns(self):

        localctx = PythonParser.Positional_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.pattern()
            self.state = 1289
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1285
                    self.match(PythonParser.COMMA)
                    self.state = 1286
                    self.pattern() 
                self.state = 1291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Keyword_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_keyword_patterns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_patterns" ):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)




    def keyword_patterns(self):

        localctx = PythonParser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.keyword_pattern()
            self.state = 1297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1293
                    self.match(PythonParser.COMMA)
                    self.state = 1294
                    self.keyword_pattern() 
                self.state = 1299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_keyword_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_pattern" ):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)




    def keyword_pattern(self):

        localctx = PythonParser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(PythonParser.NAME)
            self.state = 1301
            self.match(PythonParser.EQUAL)
            self.state = 1302
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_type(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_typeContext,0)


        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_type_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_alias" ):
                return visitor.visitType_alias(self)
            else:
                return visitor.visitChildren(self)




    def type_alias(self):

        localctx = PythonParser.Type_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_type_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.soft_kw_type()
            self.state = 1305
            self.match(PythonParser.NAME)
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 1306
                self.type_params()


            self.state = 1309
            self.match(PythonParser.EQUAL)
            self.state = 1310
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def type_param_seq(self):
            return self.getTypedRuleContext(PythonParser.Type_param_seqContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_params

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_params" ):
                return visitor.visitType_params(self)
            else:
                return visitor.visitChildren(self)




    def type_params(self):

        localctx = PythonParser.Type_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_type_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self.match(PythonParser.LSQB)
            self.state = 1313
            self.type_param_seq()
            self.state = 1314
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_param_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Type_paramContext)
            else:
                return self.getTypedRuleContext(PythonParser.Type_paramContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_type_param_seq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_param_seq" ):
                return visitor.visitType_param_seq(self)
            else:
                return visitor.visitChildren(self)




    def type_param_seq(self):

        localctx = PythonParser.Type_param_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_type_param_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.type_param()
            self.state = 1321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1317
                    self.match(PythonParser.COMMA)
                    self.state = 1318
                    self.type_param() 
                self.state = 1323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1324
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def type_param_bound(self):
            return self.getTypedRuleContext(PythonParser.Type_param_boundContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_param

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_param" ):
                return visitor.visitType_param(self)
            else:
                return visitor.visitChildren(self)




    def type_param(self):

        localctx = PythonParser.Type_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_type_param)
        self._la = 0 # Token type
        try:
            self.state = 1343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1327
                self.match(PythonParser.NAME)
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1328
                    self.type_param_bound()


                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1331
                self.match(PythonParser.STAR)
                self.state = 1332
                self.match(PythonParser.NAME)
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1333
                    self.match(PythonParser.COLON)
                    self.state = 1334
                    self.expression()


                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1337
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1338
                self.match(PythonParser.NAME)
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1339
                    self.match(PythonParser.COLON)
                    self.state = 1340
                    self.expression()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_param_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_type_param_bound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_param_bound" ):
                return visitor.visitType_param_bound(self)
            else:
                return visitor.visitChildren(self)




    def type_param_bound(self):

        localctx = PythonParser.Type_param_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_type_param_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(PythonParser.COLON)
            self.state = 1346
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressions" ):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)




    def expressions(self):

        localctx = PythonParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self.expression()
            self.state = 1353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1349
                    self.match(PythonParser.COMMA)
                    self.state = 1350
                    self.expression() 
                self.state = 1355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

            self.state = 1357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1356
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.DisjunctionContext,i)


        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(PythonParser.LambdefContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = PythonParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 1368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 6, 7, 11, 16, 34, 43, 44, 45, 53, 54, 67, 88, 93, 94, 95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1359
                self.disjunction()
                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38:
                    self.state = 1360
                    self.match(PythonParser.IF)
                    self.state = 1361
                    self.disjunction()
                    self.state = 1362
                    self.match(PythonParser.ELSE)
                    self.state = 1363
                    self.expression()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1367
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PythonParser.YIELD, 0)

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = PythonParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self.match(PythonParser.YIELD)
            self.state = 1376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.state = 1371
                self.match(PythonParser.FROM)
                self.state = 1372
                self.expression()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 46, 48, 50, 52, 53, 54, 55, 61, 67, 88, 90, 93, 94, 95, 96, 97]:
                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63111984631056584) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859201) != 0):
                    self.state = 1373
                    self.star_expressions()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expressions" ):
                return visitor.visitStar_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_expressions(self):

        localctx = PythonParser.Star_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_star_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self.star_expression()
            self.state = 1383
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1379
                    self.match(PythonParser.COMMA)
                    self.state = 1380
                    self.star_expression() 
                self.state = 1385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1386
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expression" ):
                return visitor.visitStar_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_expression(self):

        localctx = PythonParser.Star_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_star_expression)
        try:
            self.state = 1392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1389
                self.match(PythonParser.STAR)
                self.state = 1390
                self.bitwise_or(0)
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 53, 54, 67, 88, 93, 94, 95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1391
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_named_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_named_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expressions" ):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expressions(self):

        localctx = PythonParser.Star_named_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_star_named_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.star_named_expression()
            self.state = 1399
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1395
                    self.match(PythonParser.COMMA)
                    self.state = 1396
                    self.star_named_expression() 
                self.state = 1401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

            self.state = 1403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1402
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_named_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expression" ):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expression(self):

        localctx = PythonParser.Star_named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_star_named_expression)
        try:
            self.state = 1408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self.match(PythonParser.STAR)
                self.state = 1406
                self.bitwise_or(0)
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 53, 54, 67, 88, 93, 94, 95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1407
                self.named_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLONEQUAL(self):
            return self.getToken(PythonParser.COLONEQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_assignment_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_expression" ):
                return visitor.visitAssignment_expression(self)
            else:
                return visitor.visitChildren(self)




    def assignment_expression(self):

        localctx = PythonParser.Assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_assignment_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.match(PythonParser.NAME)
            self.state = 1411
            self.match(PythonParser.COLONEQUAL)
            self.state = 1412
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_expression(self):
            return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_named_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_expression" ):
                return visitor.visitNamed_expression(self)
            else:
                return visitor.visitChildren(self)




    def named_expression(self):

        localctx = PythonParser.Named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_named_expression)
        try:
            self.state = 1416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1414
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ConjunctionContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.OR)
            else:
                return self.getToken(PythonParser.OR, i)

        def getRuleIndex(self):
            return PythonParser.RULE_disjunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjunction" ):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)




    def disjunction(self):

        localctx = PythonParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1418
            self.conjunction()
            self.state = 1423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 1419
                self.match(PythonParser.OR)
                self.state = 1420
                self.conjunction()
                self.state = 1425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.InversionContext)
            else:
                return self.getTypedRuleContext(PythonParser.InversionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.AND)
            else:
                return self.getToken(PythonParser.AND, i)

        def getRuleIndex(self):
            return PythonParser.RULE_conjunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunction" ):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)




    def conjunction(self):

        localctx = PythonParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self.inversion()
            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==21:
                self.state = 1427
                self.match(PythonParser.AND)
                self.state = 1428
                self.inversion()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def inversion(self):
            return self.getTypedRuleContext(PythonParser.InversionContext,0)


        def comparison(self):
            return self.getTypedRuleContext(PythonParser.ComparisonContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_inversion

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInversion" ):
                return visitor.visitInversion(self)
            else:
                return visitor.visitChildren(self)




    def inversion(self):

        localctx = PythonParser.InversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_inversion)
        try:
            self.state = 1437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1434
                self.match(PythonParser.NOT)
                self.state = 1435
                self.inversion()
                pass
            elif token in [3, 6, 7, 11, 16, 43, 44, 45, 53, 54, 67, 88, 93, 94, 95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1436
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def compare_op_bitwise_or_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Compare_op_bitwise_or_pairContext)
            else:
                return self.getTypedRuleContext(PythonParser.Compare_op_bitwise_or_pairContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_comparison

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = PythonParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.bitwise_or(0)
            self.state = 1443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8549802418634785) != 0):
                self.state = 1440
                self.compare_op_bitwise_or_pair()
                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compare_op_bitwise_or_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eq_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Eq_bitwise_orContext,0)


        def noteq_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Noteq_bitwise_orContext,0)


        def lte_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Lte_bitwise_orContext,0)


        def lt_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Lt_bitwise_orContext,0)


        def gte_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Gte_bitwise_orContext,0)


        def gt_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Gt_bitwise_orContext,0)


        def notin_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Notin_bitwise_orContext,0)


        def in_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.In_bitwise_orContext,0)


        def isnot_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Isnot_bitwise_orContext,0)


        def is_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Is_bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_compare_op_bitwise_or_pair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompare_op_bitwise_or_pair" ):
                return visitor.visitCompare_op_bitwise_or_pair(self)
            else:
                return visitor.visitChildren(self)




    def compare_op_bitwise_or_pair(self):

        localctx = PythonParser.Compare_op_bitwise_or_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_compare_op_bitwise_or_pair)
        try:
            self.state = 1456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1446
                self.eq_bitwise_or()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1447
                self.noteq_bitwise_or()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1448
                self.lte_bitwise_or()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1449
                self.lt_bitwise_or()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1450
                self.gte_bitwise_or()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1451
                self.gt_bitwise_or()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1452
                self.notin_bitwise_or()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1453
                self.in_bitwise_or()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1454
                self.isnot_bitwise_or()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1455
                self.is_bitwise_or()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eq_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQEQUAL(self):
            return self.getToken(PythonParser.EQEQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_eq_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEq_bitwise_or" ):
                return visitor.visitEq_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def eq_bitwise_or(self):

        localctx = PythonParser.Eq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_eq_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self.match(PythonParser.EQEQUAL)
            self.state = 1459
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noteq_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def NOTEQUAL(self):
            return self.getToken(PythonParser.NOTEQUAL, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_noteq_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoteq_bitwise_or" ):
                return visitor.visitNoteq_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def noteq_bitwise_or(self):

        localctx = PythonParser.Noteq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_noteq_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.match(PythonParser.NOTEQUAL)
            self.state = 1462
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lte_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESSEQUAL(self):
            return self.getToken(PythonParser.LESSEQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lte_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLte_bitwise_or" ):
                return visitor.visitLte_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def lte_bitwise_or(self):

        localctx = PythonParser.Lte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_lte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.match(PythonParser.LESSEQUAL)
            self.state = 1465
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lt_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS(self):
            return self.getToken(PythonParser.LESS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lt_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLt_bitwise_or" ):
                return visitor.visitLt_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def lt_bitwise_or(self):

        localctx = PythonParser.Lt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_lt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self.match(PythonParser.LESS)
            self.state = 1468
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gte_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATEREQUAL(self):
            return self.getToken(PythonParser.GREATEREQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_gte_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGte_bitwise_or" ):
                return visitor.visitGte_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def gte_bitwise_or(self):

        localctx = PythonParser.Gte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_gte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            self.match(PythonParser.GREATEREQUAL)
            self.state = 1471
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gt_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(PythonParser.GREATER, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_gt_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGt_bitwise_or" ):
                return visitor.visitGt_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def gt_bitwise_or(self):

        localctx = PythonParser.Gt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_gt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473
            self.match(PythonParser.GREATER)
            self.state = 1474
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Notin_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_notin_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotin_bitwise_or" ):
                return visitor.visitNotin_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def notin_bitwise_or(self):

        localctx = PythonParser.Notin_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_notin_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self.match(PythonParser.NOT)
            self.state = 1477
            self.match(PythonParser.IN)
            self.state = 1478
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_in_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_bitwise_or" ):
                return visitor.visitIn_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def in_bitwise_or(self):

        localctx = PythonParser.In_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_in_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.match(PythonParser.IN)
            self.state = 1481
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isnot_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(PythonParser.IS, 0)

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_isnot_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsnot_bitwise_or" ):
                return visitor.visitIsnot_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def isnot_bitwise_or(self):

        localctx = PythonParser.Isnot_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_isnot_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            self.match(PythonParser.IS)
            self.state = 1484
            self.match(PythonParser.NOT)
            self.state = 1485
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(PythonParser.IS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_is_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIs_bitwise_or" ):
                return visitor.visitIs_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def is_bitwise_or(self):

        localctx = PythonParser.Is_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_is_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.match(PythonParser.IS)
            self.state = 1488
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_xor(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_xorContext,0)


        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def VBAR(self):
            return self.getToken(PythonParser.VBAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_or" ):
                return visitor.visitBitwise_or(self)
            else:
                return visitor.visitChildren(self)



    def bitwise_or(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_orContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 258
        self.enterRecursionRule(localctx, 258, self.RULE_bitwise_or, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.bitwise_xor(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1498
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_orContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_or)
                    self.state = 1493
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1494
                    self.match(PythonParser.VBAR)
                    self.state = 1495
                    self.bitwise_xor(0) 
                self.state = 1500
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Bitwise_xorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_and(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_andContext,0)


        def bitwise_xor(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_xorContext,0)


        def CIRCUMFLEX(self):
            return self.getToken(PythonParser.CIRCUMFLEX, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_xor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_xor" ):
                return visitor.visitBitwise_xor(self)
            else:
                return visitor.visitChildren(self)



    def bitwise_xor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_xorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 260
        self.enterRecursionRule(localctx, 260, self.RULE_bitwise_xor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.bitwise_and(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1509
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_xorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_xor)
                    self.state = 1504
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1505
                    self.match(PythonParser.CIRCUMFLEX)
                    self.state = 1506
                    self.bitwise_and(0) 
                self.state = 1511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Bitwise_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self):
            return self.getTypedRuleContext(PythonParser.Shift_exprContext,0)


        def bitwise_and(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_andContext,0)


        def AMPER(self):
            return self.getToken(PythonParser.AMPER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_and

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_and" ):
                return visitor.visitBitwise_and(self)
            else:
                return visitor.visitChildren(self)



    def bitwise_and(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_andContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 262
        self.enterRecursionRule(localctx, 262, self.RULE_bitwise_and, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.shift_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_andContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_and)
                    self.state = 1515
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1516
                    self.match(PythonParser.AMPER)
                    self.state = 1517
                    self.shift_expr(0) 
                self.state = 1522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Shift_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_(self):
            return self.getTypedRuleContext(PythonParser.SumContext,0)


        def shift_expr(self):
            return self.getTypedRuleContext(PythonParser.Shift_exprContext,0)


        def LEFTSHIFT(self):
            return self.getToken(PythonParser.LEFTSHIFT, 0)

        def RIGHTSHIFT(self):
            return self.getToken(PythonParser.RIGHTSHIFT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_shift_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expr" ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)



    def shift_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Shift_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 264
        self.enterRecursionRule(localctx, 264, self.RULE_shift_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.sum_(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1531
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Shift_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_shift_expr)
                    self.state = 1526
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1527
                    _la = self._input.LA(1)
                    if not(_la==69 or _la==70):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1528
                    self.sum_(0) 
                self.state = 1533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(PythonParser.TermContext,0)


        def sum_(self):
            return self.getTypedRuleContext(PythonParser.SumContext,0)


        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_sum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSum" ):
                return visitor.visitSum(self)
            else:
                return visitor.visitChildren(self)



    def sum_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.SumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 266
        self.enterRecursionRule(localctx, 266, self.RULE_sum, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1542
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.SumContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_sum)
                    self.state = 1537
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1538
                    _la = self._input.LA(1)
                    if not(_la==53 or _la==54):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1539
                    self.term(0) 
                self.state = 1544
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tolerance(self):
            return self.getTypedRuleContext(PythonParser.ToleranceContext,0)


        def term(self):
            return self.getTypedRuleContext(PythonParser.TermContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def DOUBLESLASH(self):
            return self.getToken(PythonParser.DOUBLESLASH, 0)

        def PERCENT(self):
            return self.getToken(PythonParser.PERCENT, 0)

        def AT(self):
            return self.getToken(PythonParser.AT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_term

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 268
        self.enterRecursionRule(localctx, 268, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.tolerance(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1553
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.TermContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                    self.state = 1548
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1549
                    _la = self._input.LA(1)
                    if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 1342177411) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1550
                    self.tolerance(0) 
                self.state = 1555
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ToleranceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def tolerance(self):
            return self.getTypedRuleContext(PythonParser.ToleranceContext,0)


        def TO(self):
            return self.getToken(PythonParser.TO, 0)

        def PLUS_OR_MINUS(self):
            return self.getToken(PythonParser.PLUS_OR_MINUS, 0)

        def PLUS_OR_MINU2(self):
            return self.getToken(PythonParser.PLUS_OR_MINU2, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_tolerance

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTolerance" ):
                return visitor.visitTolerance(self)
            else:
                return visitor.visitChildren(self)



    def tolerance(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.ToleranceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 270
        self.enterRecursionRule(localctx, 270, self.RULE_tolerance, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1564
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.ToleranceContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tolerance)
                    self.state = 1559
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1560
                    _la = self._input.LA(1)
                    if not(((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & 1688849860263937) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1561
                    self.factor() 
                self.state = 1566
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def TILDE(self):
            return self.getToken(PythonParser.TILDE, 0)

        def power(self):
            return self.getTypedRuleContext(PythonParser.PowerContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_factor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = PythonParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_factor)
        try:
            self.state = 1574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1567
                self.match(PythonParser.PLUS)
                self.state = 1568
                self.factor()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                self.match(PythonParser.MINUS)
                self.state = 1570
                self.factor()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1571
                self.match(PythonParser.TILDE)
                self.state = 1572
                self.factor()
                pass
            elif token in [3, 6, 7, 11, 16, 43, 44, 45, 88, 93, 94, 95]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1573
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def await_primary(self):
            return self.getTypedRuleContext(PythonParser.Await_primaryContext,0)


        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_power

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = PythonParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.await_primary()
            self.state = 1579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1577
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1578
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Await_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWAIT(self):
            return self.getToken(PythonParser.AWAIT, 0)

        def primary(self):
            return self.getTypedRuleContext(PythonParser.PrimaryContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_await_primary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAwait_primary" ):
                return visitor.visitAwait_primary(self)
            else:
                return visitor.visitChildren(self)




    def await_primary(self):

        localctx = PythonParser.Await_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_await_primary)
        try:
            self.state = 1584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1581
                self.match(PythonParser.AWAIT)
                self.state = 1582
                self.primary(0)
                pass
            elif token in [3, 6, 11, 16, 43, 44, 45, 88, 93, 94, 95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1583
                self.primary(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonParser.AtomContext,0)


        def primary(self):
            return self.getTypedRuleContext(PythonParser.PrimaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_primary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)



    def primary(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.PrimaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 278
        self.enterRecursionRule(localctx, 278, self.RULE_primary, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1587
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1606
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.PrimaryContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_primary)
                    self.state = 1589
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1602
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                    if la_ == 1:
                        self.state = 1590
                        self.match(PythonParser.DOT)
                        self.state = 1591
                        self.match(PythonParser.NAME)
                        pass

                    elif la_ == 2:
                        self.state = 1592
                        self.genexp()
                        pass

                    elif la_ == 3:
                        self.state = 1593
                        self.match(PythonParser.LPAR)
                        self.state = 1595
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63111984631056584) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859217) != 0):
                            self.state = 1594
                            self.arguments()


                        self.state = 1597
                        self.match(PythonParser.RPAR)
                        pass

                    elif la_ == 4:
                        self.state = 1598
                        self.match(PythonParser.LSQB)
                        self.state = 1599
                        self.slices()
                        self.state = 1600
                        self.match(PythonParser.RSQB)
                        pass

             
                self.state = 1608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SlicesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slice_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.SliceContext)
            else:
                return self.getTypedRuleContext(PythonParser.SliceContext,i)


        def starred_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Starred_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Starred_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_slices

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlices" ):
                return visitor.visitSlices(self)
            else:
                return visitor.visitChildren(self)




    def slices(self):

        localctx = PythonParser.SlicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_slices)
        self._la = 0 # Token type
        try:
            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1609
                self.slice_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1612
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 50, 53, 54, 67, 88, 93, 94, 95]:
                    self.state = 1610
                    self.slice_()
                    pass
                elif token in [55]:
                    self.state = 1611
                    self.starred_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1614
                        self.match(PythonParser.COMMA)
                        self.state = 1617
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 50, 53, 54, 67, 88, 93, 94, 95]:
                            self.state = 1615
                            self.slice_()
                            pass
                        elif token in [55]:
                            self.state = 1616
                            self.starred_expression()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1623
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1624
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COLON)
            else:
                return self.getToken(PythonParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_slice

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlice" ):
                return visitor.visitSlice(self)
            else:
                return visitor.visitChildren(self)




    def slice_(self):

        localctx = PythonParser.SliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_slice)
        self._la = 0 # Token type
        try:
            self.state = 1643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27083187612092616) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859201) != 0):
                    self.state = 1629
                    self.expression()


                self.state = 1632
                self.match(PythonParser.COLON)
                self.state = 1634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27083187612092616) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859201) != 0):
                    self.state = 1633
                    self.expression()


                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1636
                    self.match(PythonParser.COLON)
                    self.state = 1638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27083187612092616) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859201) != 0):
                        self.state = 1637
                        self.expression()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1642
                self.named_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def dimensioned_number(self):
            return self.getTypedRuleContext(PythonParser.Dimensioned_numberContext,0)


        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def tuple_(self):
            return self.getTypedRuleContext(PythonParser.TupleContext,0)


        def group(self):
            return self.getTypedRuleContext(PythonParser.GroupContext,0)


        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def list_(self):
            return self.getTypedRuleContext(PythonParser.ListContext,0)


        def listcomp(self):
            return self.getTypedRuleContext(PythonParser.ListcompContext,0)


        def dict_(self):
            return self.getTypedRuleContext(PythonParser.DictContext,0)


        def set_(self):
            return self.getTypedRuleContext(PythonParser.SetContext,0)


        def dictcomp(self):
            return self.getTypedRuleContext(PythonParser.DictcompContext,0)


        def setcomp(self):
            return self.getTypedRuleContext(PythonParser.SetcompContext,0)


        def ELLIPSIS(self):
            return self.getToken(PythonParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PythonParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_atom)
        try:
            self.state = 1668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1645
                self.match(PythonParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1646
                self.match(PythonParser.TRUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1647
                self.match(PythonParser.FALSE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1648
                self.match(PythonParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1649
                self.strings()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1650
                self.dimensioned_number()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1651
                self.match(PythonParser.NUMBER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1655
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1652
                    self.tuple_()
                    pass

                elif la_ == 2:
                    self.state = 1653
                    self.group()
                    pass

                elif la_ == 3:
                    self.state = 1654
                    self.genexp()
                    pass


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1657
                    self.list_()
                    pass

                elif la_ == 2:
                    self.state = 1658
                    self.listcomp()
                    pass


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1665
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1661
                    self.dict_()
                    pass

                elif la_ == 2:
                    self.state = 1662
                    self.set_()
                    pass

                elif la_ == 3:
                    self.state = 1663
                    self.dictcomp()
                    pass

                elif la_ == 4:
                    self.state = 1664
                    self.setcomp()
                    pass


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1667
                self.match(PythonParser.ELLIPSIS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dimensioned_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def STRING(self):
            return self.getToken(PythonParser.STRING, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dimensioned_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimensioned_number" ):
                return visitor.visitDimensioned_number(self)
            else:
                return visitor.visitChildren(self)




    def dimensioned_number(self):

        localctx = PythonParser.Dimensioned_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_dimensioned_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.match(PythonParser.NUMBER)
            self.state = 1671
            _la = self._input.LA(1)
            if not(_la==93 or _la==95):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_group

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = PythonParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            self.match(PythonParser.LPAR)
            self.state = 1676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.state = 1674
                self.yield_expr()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 53, 54, 67, 88, 93, 94, 95]:
                self.state = 1675
                self.named_expression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1678
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def lambda_params(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = PythonParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self.match(PythonParser.LAMBDA)
            self.state = 1682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 274877972481) != 0):
                self.state = 1681
                self.lambda_params()


            self.state = 1684
            self.match(PythonParser.COLON)
            self.state = 1685
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_parameters(self):
            return self.getTypedRuleContext(PythonParser.Lambda_parametersContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_params

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_params" ):
                return visitor.visitLambda_params(self)
            else:
                return visitor.visitChildren(self)




    def lambda_params(self):

        localctx = PythonParser.Lambda_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_lambda_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self.lambda_parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_slash_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_slash_no_defaultContext,0)


        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def lambda_param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_with_defaultContext,i)


        def lambda_star_etc(self):
            return self.getTypedRuleContext(PythonParser.Lambda_star_etcContext,0)


        def lambda_slash_with_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_slash_with_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_parameters" ):
                return visitor.visitLambda_parameters(self)
            else:
                return visitor.visitChildren(self)




    def lambda_parameters(self):

        localctx = PythonParser.Lambda_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_lambda_parameters)
        self._la = 0 # Token type
        try:
            self.state = 1738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1689
                self.lambda_slash_no_default()
                self.state = 1693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1690
                        self.lambda_param_no_default() 
                    self.state = 1695
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

                self.state = 1699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==93:
                    self.state = 1696
                    self.lambda_param_with_default()
                    self.state = 1701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55 or _la==71:
                    self.state = 1702
                    self.lambda_star_etc()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1705
                self.lambda_slash_with_default()
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==93:
                    self.state = 1706
                    self.lambda_param_with_default()
                    self.state = 1711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55 or _la==71:
                    self.state = 1712
                    self.lambda_star_etc()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1716 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1715
                        self.lambda_param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1718 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

                self.state = 1723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==93:
                    self.state = 1720
                    self.lambda_param_with_default()
                    self.state = 1725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55 or _la==71:
                    self.state = 1726
                    self.lambda_star_etc()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1730 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1729
                    self.lambda_param_with_default()
                    self.state = 1732 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==93):
                        break

                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55 or _la==71:
                    self.state = 1734
                    self.lambda_star_etc()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1737
                self.lambda_star_etc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_slash_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_slash_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_slash_no_default" ):
                return visitor.visitLambda_slash_no_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_slash_no_default(self):

        localctx = PythonParser.Lambda_slash_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_lambda_slash_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1741 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1740
                self.lambda_param_no_default()
                self.state = 1743 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==93):
                    break

            self.state = 1745
            self.match(PythonParser.SLASH)
            self.state = 1747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1746
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_slash_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def lambda_param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_with_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_slash_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_slash_with_default" ):
                return visitor.visitLambda_slash_with_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_slash_with_default(self):

        localctx = PythonParser.Lambda_slash_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_lambda_slash_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1749
                    self.lambda_param_no_default() 
                self.state = 1754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

            self.state = 1756 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1755
                self.lambda_param_with_default()
                self.state = 1758 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==93):
                    break

            self.state = 1760
            self.match(PythonParser.SLASH)
            self.state = 1762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1761
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_star_etcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,0)


        def lambda_param_maybe_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_maybe_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_maybe_defaultContext,i)


        def lambda_kwds(self):
            return self.getTypedRuleContext(PythonParser.Lambda_kwdsContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_star_etc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_star_etc" ):
                return visitor.visitLambda_star_etc(self)
            else:
                return visitor.visitChildren(self)




    def lambda_star_etc(self):

        localctx = PythonParser.Lambda_star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_lambda_star_etc)
        self._la = 0 # Token type
        try:
            self.state = 1786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1764
                self.match(PythonParser.STAR)
                self.state = 1765
                self.lambda_param_no_default()
                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==93:
                    self.state = 1766
                    self.lambda_param_maybe_default()
                    self.state = 1771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 1772
                    self.lambda_kwds()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1775
                self.match(PythonParser.STAR)
                self.state = 1776
                self.match(PythonParser.COMMA)
                self.state = 1778 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1777
                    self.lambda_param_maybe_default()
                    self.state = 1780 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==93):
                        break

                self.state = 1783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 1782
                    self.lambda_kwds()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1785
                self.lambda_kwds()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_kwdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_kwds

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_kwds" ):
                return visitor.visitLambda_kwds(self)
            else:
                return visitor.visitChildren(self)




    def lambda_kwds(self):

        localctx = PythonParser.Lambda_kwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_lambda_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1788
            self.match(PythonParser.DOUBLESTAR)
            self.state = 1789
            self.lambda_param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param_no_default" ):
                return visitor.visitLambda_param_no_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param_no_default(self):

        localctx = PythonParser.Lambda_param_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_lambda_param_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1791
            self.lambda_param()
            self.state = 1793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1792
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param_with_default" ):
                return visitor.visitLambda_param_with_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param_with_default(self):

        localctx = PythonParser.Lambda_param_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_lambda_param_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.lambda_param()
            self.state = 1796
            self.default_assignment()
            self.state = 1798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1797
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_maybe_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_maybe_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param_maybe_default" ):
                return visitor.visitLambda_param_maybe_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param_maybe_default(self):

        localctx = PythonParser.Lambda_param_maybe_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_lambda_param_maybe_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            self.lambda_param()
            self.state = 1802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 1801
                self.default_assignment()


            self.state = 1805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1804
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param" ):
                return visitor.visitLambda_param(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param(self):

        localctx = PythonParser.Lambda_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_lambda_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1807
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_middleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(PythonParser.Fstring_replacement_fieldContext,0)


        def FSTRING_MIDDLE(self):
            return self.getToken(PythonParser.FSTRING_MIDDLE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_fstring_middle

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_middle" ):
                return visitor.visitFstring_middle(self)
            else:
                return visitor.visitChildren(self)




    def fstring_middle(self):

        localctx = PythonParser.Fstring_middleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_fstring_middle)
        try:
            self.state = 1811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1809
                self.fstring_replacement_field()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1810
                self.match(PythonParser.FSTRING_MIDDLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_replacement_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def fstring_conversion(self):
            return self.getTypedRuleContext(PythonParser.Fstring_conversionContext,0)


        def fstring_full_format_spec(self):
            return self.getTypedRuleContext(PythonParser.Fstring_full_format_specContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_replacement_field

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_replacement_field" ):
                return visitor.visitFstring_replacement_field(self)
            else:
                return visitor.visitChildren(self)




    def fstring_replacement_field(self):

        localctx = PythonParser.Fstring_replacement_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_fstring_replacement_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.match(PythonParser.LBRACE)
            self.state = 1816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.state = 1814
                self.yield_expr()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 53, 54, 55, 67, 88, 93, 94, 95]:
                self.state = 1815
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 1818
                self.match(PythonParser.EQUAL)


            self.state = 1822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1821
                self.fstring_conversion()


            self.state = 1825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1824
                self.fstring_full_format_spec()


            self.state = 1827
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_conversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION(self):
            return self.getToken(PythonParser.EXCLAMATION, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_fstring_conversion

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_conversion" ):
                return visitor.visitFstring_conversion(self)
            else:
                return visitor.visitChildren(self)




    def fstring_conversion(self):

        localctx = PythonParser.Fstring_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_fstring_conversion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self.match(PythonParser.EXCLAMATION)
            self.state = 1830
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_full_format_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def fstring_format_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Fstring_format_specContext)
            else:
                return self.getTypedRuleContext(PythonParser.Fstring_format_specContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_full_format_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_full_format_spec" ):
                return visitor.visitFstring_full_format_spec(self)
            else:
                return visitor.visitChildren(self)




    def fstring_full_format_spec(self):

        localctx = PythonParser.Fstring_full_format_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_fstring_full_format_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.match(PythonParser.COLON)
            self.state = 1836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==45:
                self.state = 1833
                self.fstring_format_spec()
                self.state = 1838
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_format_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSTRING_MIDDLE(self):
            return self.getToken(PythonParser.FSTRING_MIDDLE, 0)

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(PythonParser.Fstring_replacement_fieldContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_format_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_format_spec" ):
                return visitor.visitFstring_format_spec(self)
            else:
                return visitor.visitChildren(self)




    def fstring_format_spec(self):

        localctx = PythonParser.Fstring_format_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_fstring_format_spec)
        try:
            self.state = 1841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1839
                self.match(PythonParser.FSTRING_MIDDLE)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1840
                self.fstring_replacement_field()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FstringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSTRING_START(self):
            return self.getToken(PythonParser.FSTRING_START, 0)

        def FSTRING_END(self):
            return self.getToken(PythonParser.FSTRING_END, 0)

        def fstring_middle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Fstring_middleContext)
            else:
                return self.getTypedRuleContext(PythonParser.Fstring_middleContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring" ):
                return visitor.visitFstring(self)
            else:
                return visitor.visitChildren(self)




    def fstring(self):

        localctx = PythonParser.FstringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_fstring)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.match(PythonParser.FSTRING_START)
            self.state = 1847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==45:
                self.state = 1844
                self.fstring_middle()
                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1850
            self.match(PythonParser.FSTRING_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(PythonParser.STRING, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = PythonParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self.match(PythonParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.FstringContext)
            else:
                return self.getTypedRuleContext(PythonParser.FstringContext,i)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StringContext)
            else:
                return self.getTypedRuleContext(PythonParser.StringContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_strings

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrings" ):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)




    def strings(self):

        localctx = PythonParser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_strings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1856
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3]:
                        self.state = 1854
                        self.fstring()
                        pass
                    elif token in [95]:
                        self.state = 1855
                        self.string()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1858 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list_(self):

        localctx = PythonParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1860
            self.match(PythonParser.LSQB)
            self.state = 1862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63111984631056584) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859201) != 0):
                self.state = 1861
                self.star_named_expressions()


            self.state = 1864
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def star_named_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_tuple

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple" ):
                return visitor.visitTuple(self)
            else:
                return visitor.visitChildren(self)




    def tuple_(self):

        localctx = PythonParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1866
            self.match(PythonParser.LPAR)
            self.state = 1872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63111984631056584) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859201) != 0):
                self.state = 1867
                self.star_named_expression()
                self.state = 1868
                self.match(PythonParser.COMMA)
                self.state = 1870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63111984631056584) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859201) != 0):
                    self.state = 1869
                    self.star_named_expressions()




            self.state = 1874
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_set

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet" ):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)




    def set_(self):

        localctx = PythonParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1876
            self.match(PythonParser.LBRACE)
            self.state = 1877
            self.star_named_expressions()
            self.state = 1878
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def double_starred_kvpairs(self):
            return self.getTypedRuleContext(PythonParser.Double_starred_kvpairsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_dict

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict_(self):

        localctx = PythonParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1880
            self.match(PythonParser.LBRACE)
            self.state = 1882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27083187612092616) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859217) != 0):
                self.state = 1881
                self.double_starred_kvpairs()


            self.state = 1884
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_starred_kvpairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def double_starred_kvpair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Double_starred_kvpairContext)
            else:
                return self.getTypedRuleContext(PythonParser.Double_starred_kvpairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_double_starred_kvpairs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_starred_kvpairs" ):
                return visitor.visitDouble_starred_kvpairs(self)
            else:
                return visitor.visitChildren(self)




    def double_starred_kvpairs(self):

        localctx = PythonParser.Double_starred_kvpairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_double_starred_kvpairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self.double_starred_kvpair()
            self.state = 1891
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,240,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1887
                    self.match(PythonParser.COMMA)
                    self.state = 1888
                    self.double_starred_kvpair() 
                self.state = 1893
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

            self.state = 1895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1894
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_starred_kvpairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def kvpair(self):
            return self.getTypedRuleContext(PythonParser.KvpairContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_double_starred_kvpair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_starred_kvpair" ):
                return visitor.visitDouble_starred_kvpair(self)
            else:
                return visitor.visitChildren(self)




    def double_starred_kvpair(self):

        localctx = PythonParser.Double_starred_kvpairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_double_starred_kvpair)
        try:
            self.state = 1900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1897
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1898
                self.bitwise_or(0)
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 53, 54, 67, 88, 93, 94, 95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1899
                self.kvpair()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvpairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_kvpair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvpair" ):
                return visitor.visitKvpair(self)
            else:
                return visitor.visitChildren(self)




    def kvpair(self):

        localctx = PythonParser.KvpairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_kvpair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            self.expression()
            self.state = 1903
            self.match(PythonParser.COLON)
            self.state = 1904
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_if_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_if_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.For_if_clauseContext)
            else:
                return self.getTypedRuleContext(PythonParser.For_if_clauseContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_for_if_clauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_if_clauses" ):
                return visitor.visitFor_if_clauses(self)
            else:
                return visitor.visitChildren(self)




    def for_if_clauses(self):

        localctx = PythonParser.For_if_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_for_if_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1907 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1906
                self.for_if_clause()
                self.state = 1909 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==23 or _la==36):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_if_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(PythonParser.Star_targetsContext,0)


        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.DisjunctionContext,i)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.IF)
            else:
                return self.getToken(PythonParser.IF, i)

        def getRuleIndex(self):
            return PythonParser.RULE_for_if_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_if_clause" ):
                return visitor.visitFor_if_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_if_clause(self):

        localctx = PythonParser.For_if_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_for_if_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 1911
                self.match(PythonParser.ASYNC)


            self.state = 1914
            self.match(PythonParser.FOR)
            self.state = 1915
            self.star_targets()
            self.state = 1916
            self.match(PythonParser.IN)
            self.state = 1917
            self.disjunction()
            self.state = 1922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==38:
                self.state = 1918
                self.match(PythonParser.IF)
                self.state = 1919
                self.disjunction()
                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_listcomp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListcomp" ):
                return visitor.visitListcomp(self)
            else:
                return visitor.visitChildren(self)




    def listcomp(self):

        localctx = PythonParser.ListcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_listcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1925
            self.match(PythonParser.LSQB)
            self.state = 1926
            self.named_expression()
            self.state = 1927
            self.for_if_clauses()
            self.state = 1928
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_setcomp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetcomp" ):
                return visitor.visitSetcomp(self)
            else:
                return visitor.visitChildren(self)




    def setcomp(self):

        localctx = PythonParser.SetcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_setcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.match(PythonParser.LBRACE)
            self.state = 1931
            self.named_expression()
            self.state = 1932
            self.for_if_clauses()
            self.state = 1933
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenexpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def assignment_expression(self):
            return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_genexp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenexp" ):
                return visitor.visitGenexp(self)
            else:
                return visitor.visitChildren(self)




    def genexp(self):

        localctx = PythonParser.GenexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_genexp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            self.match(PythonParser.LPAR)
            self.state = 1938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 1936
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.state = 1937
                self.expression()
                pass


            self.state = 1940
            self.for_if_clauses()
            self.state = 1941
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def kvpair(self):
            return self.getTypedRuleContext(PythonParser.KvpairContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dictcomp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictcomp" ):
                return visitor.visitDictcomp(self)
            else:
                return visitor.visitChildren(self)




    def dictcomp(self):

        localctx = PythonParser.DictcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_dictcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self.match(PythonParser.LBRACE)
            self.state = 1944
            self.kvpair()
            self.state = 1945
            self.for_if_clauses()
            self.state = 1946
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(PythonParser.ArgsContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_arguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = PythonParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self.args()
            self.state = 1950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1949
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def starred_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Starred_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Starred_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def kwargs(self):
            return self.getTypedRuleContext(PythonParser.KwargsContext,0)


        def assignment_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Assignment_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_args

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = PythonParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_args)
        try:
            self.state = 1977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1957
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55]:
                    self.state = 1952
                    self.starred_expression()
                    pass
                elif token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 53, 54, 67, 88, 93, 94, 95]:
                    self.state = 1955
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                    if la_ == 1:
                        self.state = 1953
                        self.assignment_expression()
                        pass

                    elif la_ == 2:
                        self.state = 1954
                        self.expression()
                        pass


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1969
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1959
                        self.match(PythonParser.COMMA)
                        self.state = 1965
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [55]:
                            self.state = 1960
                            self.starred_expression()
                            pass
                        elif token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 53, 54, 67, 88, 93, 94, 95]:
                            self.state = 1963
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                            if la_ == 1:
                                self.state = 1961
                                self.assignment_expression()
                                pass

                            elif la_ == 2:
                                self.state = 1962
                                self.expression()
                                pass


                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1971
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

                self.state = 1974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 1972
                    self.match(PythonParser.COMMA)
                    self.state = 1973
                    self.kwargs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1976
                self.kwargs()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kwarg_or_starred(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Kwarg_or_starredContext)
            else:
                return self.getTypedRuleContext(PythonParser.Kwarg_or_starredContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def kwarg_or_double_starred(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Kwarg_or_double_starredContext)
            else:
                return self.getTypedRuleContext(PythonParser.Kwarg_or_double_starredContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_kwargs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = PythonParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_kwargs)
        try:
            self.state = 2006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1979
                self.kwarg_or_starred()
                self.state = 1984
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1980
                        self.match(PythonParser.COMMA)
                        self.state = 1981
                        self.kwarg_or_starred() 
                    self.state = 1986
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

                self.state = 1996
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 1987
                    self.match(PythonParser.COMMA)
                    self.state = 1988
                    self.kwarg_or_double_starred()
                    self.state = 1993
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1989
                            self.match(PythonParser.COMMA)
                            self.state = 1990
                            self.kwarg_or_double_starred() 
                        self.state = 1995
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,256,self._ctx)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1998
                self.kwarg_or_double_starred()
                self.state = 2003
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1999
                        self.match(PythonParser.COMMA)
                        self.state = 2000
                        self.kwarg_or_double_starred() 
                    self.state = 2005
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Starred_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_starred_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarred_expression" ):
                return visitor.visitStarred_expression(self)
            else:
                return visitor.visitChildren(self)




    def starred_expression(self):

        localctx = PythonParser.Starred_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_starred_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.match(PythonParser.STAR)
            self.state = 2009
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwarg_or_starredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def starred_expression(self):
            return self.getTypedRuleContext(PythonParser.Starred_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_kwarg_or_starred

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwarg_or_starred" ):
                return visitor.visitKwarg_or_starred(self)
            else:
                return visitor.visitChildren(self)




    def kwarg_or_starred(self):

        localctx = PythonParser.Kwarg_or_starredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_kwarg_or_starred)
        try:
            self.state = 2015
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2011
                self.match(PythonParser.NAME)
                self.state = 2012
                self.match(PythonParser.EQUAL)
                self.state = 2013
                self.expression()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2014
                self.starred_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwarg_or_double_starredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_kwarg_or_double_starred

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwarg_or_double_starred" ):
                return visitor.visitKwarg_or_double_starred(self)
            else:
                return visitor.visitChildren(self)




    def kwarg_or_double_starred(self):

        localctx = PythonParser.Kwarg_or_double_starredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_kwarg_or_double_starred)
        try:
            self.state = 2022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2017
                self.match(PythonParser.NAME)
                self.state = 2018
                self.match(PythonParser.EQUAL)
                self.state = 2019
                self.expression()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2020
                self.match(PythonParser.DOUBLESTAR)
                self.state = 2021
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_targets" ):
                return visitor.visitStar_targets(self)
            else:
                return visitor.visitChildren(self)




    def star_targets(self):

        localctx = PythonParser.Star_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_star_targets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.star_target()
            self.state = 2029
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2025
                    self.match(PythonParser.COMMA)
                    self.state = 2026
                    self.star_target() 
                self.state = 2031
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 2032
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targets_list_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets_list_seq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_targets_list_seq" ):
                return visitor.visitStar_targets_list_seq(self)
            else:
                return visitor.visitChildren(self)




    def star_targets_list_seq(self):

        localctx = PythonParser.Star_targets_list_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_star_targets_list_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self.star_target()
            self.state = 2038 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2036
                    self.match(PythonParser.COMMA)
                    self.state = 2037
                    self.star_target()

                else:
                    raise NoViableAltException(self)
                self.state = 2040 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

            self.state = 2043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 2042
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targets_tuple_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets_tuple_seq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_targets_tuple_seq" ):
                return visitor.visitStar_targets_tuple_seq(self)
            else:
                return visitor.visitChildren(self)




    def star_targets_tuple_seq(self):

        localctx = PythonParser.Star_targets_tuple_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_star_targets_tuple_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2045
            self.star_target()
            self.state = 2056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 2046
                self.match(PythonParser.COMMA)
                pass

            elif la_ == 2:
                self.state = 2049 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2047
                        self.match(PythonParser.COMMA)
                        self.state = 2048
                        self.star_target()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2051 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

                self.state = 2054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 2053
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def star_target(self):
            return self.getTypedRuleContext(PythonParser.Star_targetContext,0)


        def target_with_star_atom(self):
            return self.getTypedRuleContext(PythonParser.Target_with_star_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_target" ):
                return visitor.visitStar_target(self)
            else:
                return visitor.visitChildren(self)




    def star_target(self):

        localctx = PythonParser.Star_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_star_target)
        try:
            self.state = 2061
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2058
                self.match(PythonParser.STAR)

                self.state = 2059
                self.star_target()
                pass
            elif token in [3, 6, 11, 16, 43, 44, 45, 88, 93, 94, 95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2060
                self.target_with_star_atom()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_with_star_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_atom(self):
            return self.getTypedRuleContext(PythonParser.Star_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_target_with_star_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTarget_with_star_atom" ):
                return visitor.visitTarget_with_star_atom(self)
            else:
                return visitor.visitChildren(self)




    def target_with_star_atom(self):

        localctx = PythonParser.Target_with_star_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_target_with_star_atom)
        try:
            self.state = 2073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2063
                self.t_primary(0)
                self.state = 2070
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 2064
                    self.match(PythonParser.DOT)
                    self.state = 2065
                    self.match(PythonParser.NAME)
                    pass
                elif token in [44]:
                    self.state = 2066
                    self.match(PythonParser.LSQB)
                    self.state = 2067
                    self.slices()
                    self.state = 2068
                    self.match(PythonParser.RSQB)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2072
                self.star_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def target_with_star_atom(self):
            return self.getTypedRuleContext(PythonParser.Target_with_star_atomContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def star_targets_tuple_seq(self):
            return self.getTypedRuleContext(PythonParser.Star_targets_tuple_seqContext,0)


        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_targets_list_seq(self):
            return self.getTypedRuleContext(PythonParser.Star_targets_list_seqContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_atom" ):
                return visitor.visitStar_atom(self)
            else:
                return visitor.visitChildren(self)




    def star_atom(self):

        localctx = PythonParser.Star_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_star_atom)
        self._la = 0 # Token type
        try:
            self.state = 2090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2075
                self.match(PythonParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2076
                self.match(PythonParser.LPAR)
                self.state = 2077
                self.target_with_star_atom()
                self.state = 2078
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2080
                self.match(PythonParser.LPAR)
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36090369670187080) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 225) != 0):
                    self.state = 2081
                    self.star_targets_tuple_seq()


                self.state = 2084
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2085
                self.match(PythonParser.LSQB)
                self.state = 2087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36090369670187080) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 225) != 0):
                    self.state = 2086
                    self.star_targets_list_seq()


                self.state = 2089
                self.match(PythonParser.RSQB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(PythonParser.Single_subscript_attribute_targetContext,0)


        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def single_target(self):
            return self.getTypedRuleContext(PythonParser.Single_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_single_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_target" ):
                return visitor.visitSingle_target(self)
            else:
                return visitor.visitChildren(self)




    def single_target(self):

        localctx = PythonParser.Single_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_single_target)
        try:
            self.state = 2098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2092
                self.single_subscript_attribute_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2093
                self.match(PythonParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2094
                self.match(PythonParser.LPAR)
                self.state = 2095
                self.single_target()
                self.state = 2096
                self.match(PythonParser.RPAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_subscript_attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_single_subscript_attribute_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_subscript_attribute_target" ):
                return visitor.visitSingle_subscript_attribute_target(self)
            else:
                return visitor.visitChildren(self)




    def single_subscript_attribute_target(self):

        localctx = PythonParser.Single_subscript_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_single_subscript_attribute_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2100
            self.t_primary(0)
            self.state = 2107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.state = 2101
                self.match(PythonParser.DOT)
                self.state = 2102
                self.match(PythonParser.NAME)
                pass
            elif token in [44]:
                self.state = 2103
                self.match(PythonParser.LSQB)
                self.state = 2104
                self.slices()
                self.state = 2105
                self.match(PythonParser.RSQB)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class T_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonParser.AtomContext,0)


        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_t_primary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitT_primary" ):
                return visitor.visitT_primary(self)
            else:
                return visitor.visitChildren(self)



    def t_primary(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.T_primaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 382
        self.enterRecursionRule(localctx, 382, self.RULE_t_primary, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2110
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2129
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,279,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.T_primaryContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_t_primary)
                    self.state = 2112
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2125
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                    if la_ == 1:
                        self.state = 2113
                        self.match(PythonParser.DOT)
                        self.state = 2114
                        self.match(PythonParser.NAME)
                        pass

                    elif la_ == 2:
                        self.state = 2115
                        self.match(PythonParser.LSQB)
                        self.state = 2116
                        self.slices()
                        self.state = 2117
                        self.match(PythonParser.RSQB)
                        pass

                    elif la_ == 3:
                        self.state = 2119
                        self.genexp()
                        pass

                    elif la_ == 4:
                        self.state = 2120
                        self.match(PythonParser.LPAR)
                        self.state = 2122
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63111984631056584) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 471859217) != 0):
                            self.state = 2121
                            self.arguments()


                        self.state = 2124
                        self.match(PythonParser.RPAR)
                        pass

             
                self.state = 2131
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,279,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Del_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def del_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Del_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Del_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_del_targets

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_targets" ):
                return visitor.visitDel_targets(self)
            else:
                return visitor.visitChildren(self)




    def del_targets(self):

        localctx = PythonParser.Del_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_del_targets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            self.del_target()
            self.state = 2137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2133
                    self.match(PythonParser.COMMA)
                    self.state = 2134
                    self.del_target() 
                self.state = 2139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

            self.state = 2141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 2140
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def del_t_atom(self):
            return self.getTypedRuleContext(PythonParser.Del_t_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_del_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_target" ):
                return visitor.visitDel_target(self)
            else:
                return visitor.visitChildren(self)




    def del_target(self):

        localctx = PythonParser.Del_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_del_target)
        try:
            self.state = 2153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2143
                self.t_primary(0)
                self.state = 2150
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 2144
                    self.match(PythonParser.DOT)
                    self.state = 2145
                    self.match(PythonParser.NAME)
                    pass
                elif token in [44]:
                    self.state = 2146
                    self.match(PythonParser.LSQB)
                    self.state = 2147
                    self.slices()
                    self.state = 2148
                    self.match(PythonParser.RSQB)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2152
                self.del_t_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_t_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def del_target(self):
            return self.getTypedRuleContext(PythonParser.Del_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def del_targets(self):
            return self.getTypedRuleContext(PythonParser.Del_targetsContext,0)


        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_del_t_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_t_atom" ):
                return visitor.visitDel_t_atom(self)
            else:
                return visitor.visitChildren(self)




    def del_t_atom(self):

        localctx = PythonParser.Del_t_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_del_t_atom)
        self._la = 0 # Token type
        try:
            self.state = 2170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2155
                self.match(PythonParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2156
                self.match(PythonParser.LPAR)
                self.state = 2157
                self.del_target()
                self.state = 2158
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2160
                self.match(PythonParser.LPAR)
                self.state = 2162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 61572651223112) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 225) != 0):
                    self.state = 2161
                    self.del_targets()


                self.state = 2164
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2165
                self.match(PythonParser.LSQB)
                self.state = 2167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 61572651223112) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 225) != 0):
                    self.state = 2166
                    self.del_targets()


                self.state = 2169
                self.match(PythonParser.RSQB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_expressions" ):
                return visitor.visitType_expressions(self)
            else:
                return visitor.visitChildren(self)




    def type_expressions(self):

        localctx = PythonParser.Type_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_type_expressions)
        self._la = 0 # Token type
        try:
            self.state = 2203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 6, 7, 11, 16, 24, 34, 43, 44, 45, 53, 54, 67, 88, 93, 94, 95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2172
                self.expression()
                self.state = 2177
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2173
                        self.match(PythonParser.COMMA)
                        self.state = 2174
                        self.expression() 
                    self.state = 2179
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

                self.state = 2192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 2180
                    self.match(PythonParser.COMMA)
                    self.state = 2190
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [55]:
                        self.state = 2181
                        self.match(PythonParser.STAR)
                        self.state = 2182
                        self.expression()
                        self.state = 2186
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==51:
                            self.state = 2183
                            self.match(PythonParser.COMMA)
                            self.state = 2184
                            self.match(PythonParser.DOUBLESTAR)
                            self.state = 2185
                            self.expression()


                        pass
                    elif token in [71]:
                        self.state = 2188
                        self.match(PythonParser.DOUBLESTAR)
                        self.state = 2189
                        self.expression()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2194
                self.match(PythonParser.STAR)
                self.state = 2195
                self.expression()
                self.state = 2199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 2196
                    self.match(PythonParser.COMMA)
                    self.state = 2197
                    self.match(PythonParser.DOUBLESTAR)
                    self.state = 2198
                    self.expression()


                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2201
                self.match(PythonParser.DOUBLESTAR)
                self.state = 2202
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_type_commentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_func_type_comment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_type_comment" ):
                return visitor.visitFunc_type_comment(self)
            else:
                return visitor.visitChildren(self)




    def func_type_comment(self):

        localctx = PythonParser.Func_type_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_func_type_comment)
        try:
            self.state = 2208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2205
                self.match(PythonParser.NEWLINE)
                self.state = 2206
                self.match(PythonParser.TYPE_COMMENT)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2207
                self.match(PythonParser.TYPE_COMMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_type" ):
                return visitor.visitSoft_kw_type(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_type(self):

        localctx = PythonParser.Soft_kw_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_soft_kw_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            if not self.isEqualToCurrentTokenText("type"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualToCurrentTokenText(\"type\")")
            self.state = 2211
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_match

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_match" ):
                return visitor.visitSoft_kw_match(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_match(self):

        localctx = PythonParser.Soft_kw_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_soft_kw_match)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            if not self.isEqualToCurrentTokenText("match"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualToCurrentTokenText(\"match\")")
            self.state = 2214
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_case

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_case" ):
                return visitor.visitSoft_kw_case(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_case(self):

        localctx = PythonParser.Soft_kw_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_soft_kw_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2216
            if not self.isEqualToCurrentTokenText("case"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualToCurrentTokenText(\"case\")")
            self.state = 2217
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_wildcard

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_wildcard" ):
                return visitor.visitSoft_kw_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_wildcard(self):

        localctx = PythonParser.Soft_kw_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_soft_kw_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2219
            if not self.isEqualToCurrentTokenText("_"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualToCurrentTokenText(\"_\")")
            self.state = 2220
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw__not__wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw__not__wildcard

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw__not__wildcard" ):
                return visitor.visitSoft_kw__not__wildcard(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw__not__wildcard(self):

        localctx = PythonParser.Soft_kw__not__wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_soft_kw__not__wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2222
            if not self.isnotEqualToCurrentTokenText("_"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isnotEqualToCurrentTokenText(\"_\")")
            self.state = 2223
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[30] = self.dotted_name_sempred
        self._predicates[129] = self.bitwise_or_sempred
        self._predicates[130] = self.bitwise_xor_sempred
        self._predicates[131] = self.bitwise_and_sempred
        self._predicates[132] = self.shift_expr_sempred
        self._predicates[133] = self.sum_sempred
        self._predicates[134] = self.term_sempred
        self._predicates[135] = self.tolerance_sempred
        self._predicates[139] = self.primary_sempred
        self._predicates[191] = self.t_primary_sempred
        self._predicates[197] = self.soft_kw_type_sempred
        self._predicates[198] = self.soft_kw_match_sempred
        self._predicates[199] = self.soft_kw_case_sempred
        self._predicates[200] = self.soft_kw_wildcard_sempred
        self._predicates[201] = self.soft_kw__not__wildcard_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def bitwise_or_sempred(self, localctx:Bitwise_orContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def bitwise_xor_sempred(self, localctx:Bitwise_xorContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def bitwise_and_sempred(self, localctx:Bitwise_andContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def shift_expr_sempred(self, localctx:Shift_exprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def sum_sempred(self, localctx:SumContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def tolerance_sempred(self, localctx:ToleranceContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def primary_sempred(self, localctx:PrimaryContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def t_primary_sempred(self, localctx:T_primaryContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

    def soft_kw_type_sempred(self, localctx:Soft_kw_typeContext, predIndex:int):
            if predIndex == 10:
                return self.isEqualToCurrentTokenText("type")
         

    def soft_kw_match_sempred(self, localctx:Soft_kw_matchContext, predIndex:int):
            if predIndex == 11:
                return self.isEqualToCurrentTokenText("match")
         

    def soft_kw_case_sempred(self, localctx:Soft_kw_caseContext, predIndex:int):
            if predIndex == 12:
                return self.isEqualToCurrentTokenText("case")
         

    def soft_kw_wildcard_sempred(self, localctx:Soft_kw_wildcardContext, predIndex:int):
            if predIndex == 13:
                return self.isEqualToCurrentTokenText("_")
         

    def soft_kw__not__wildcard_sempred(self, localctx:Soft_kw__not__wildcardContext, predIndex:int):
            if predIndex == 14:
                return self.isnotEqualToCurrentTokenText("_")
         




