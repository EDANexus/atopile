# generated by datamodel-codegen:
#   filename:  http://127.0.0.1:8000/openapi.json
#   timestamp: 2024-05-31T19:07:34+00:00

from __future__ import annotations

from typing import Dict, List, Optional, Union

from pydantic import BaseModel, Field


class DiagnosticReport(BaseModel):
    results_without_filter: Dict[str, int] = Field(..., title='Results Without Filter')


class ResistorInput(BaseModel):
    mpn: Optional[List[str]] = Field(None, title='Mpn')
    package: Optional[List[str]] = Field(None, title='Package')
    resistance_ohms_min: Optional[float] = Field(None, title='Resistance Ohms Min')
    resistance_ohms_max: Optional[float] = Field(None, title='Resistance Ohms Max')
    rated_power_watts: Optional[float] = Field(None, title='Rated Power Watts')
    rated_temp_celsius_min: Optional[float] = Field(
        None, title='Rated Temp Celsius Min'
    )
    rated_temp_celsius_max: Optional[float] = Field(
        None, title='Rated Temp Celsius Max'
    )


class ResistorOutput(BaseModel):
    mpn: Optional[str] = Field(None, title='Mpn')
    package: Optional[str] = Field(None, title='Package')
    resistance_ohms_min: Optional[float] = Field(None, title='Resistance Ohms Min')
    resistance_ohms_max: Optional[float] = Field(None, title='Resistance Ohms Max')
    rated_power_watts: Optional[float] = Field(None, title='Rated Power Watts')
    rated_temp_celsius_min: Optional[float] = Field(
        None, title='Rated Temp Celsius Min'
    )
    rated_temp_celsius_max: Optional[float] = Field(
        None, title='Rated Temp Celsius Max'
    )


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')
